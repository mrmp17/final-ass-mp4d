// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="nn_inference_nn_inference,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.284616,HLS_SYN_LAT=34972,HLS_SYN_TPT=none,HLS_SYN_MEM=32,HLS_SYN_DSP=0,HLS_SYN_FF=8122,HLS_SYN_LUT=9244,HLS_VERSION=2020_2}" *)

module nn_inference (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_img_address0,
        input_img_ce0,
        input_img_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 48'd1;
parameter    ap_ST_fsm_pp0_stage0 = 48'd2;
parameter    ap_ST_fsm_state6 = 48'd4;
parameter    ap_ST_fsm_state7 = 48'd8;
parameter    ap_ST_fsm_pp1_stage0 = 48'd16;
parameter    ap_ST_fsm_state11 = 48'd32;
parameter    ap_ST_fsm_pp2_stage0 = 48'd64;
parameter    ap_ST_fsm_state16 = 48'd128;
parameter    ap_ST_fsm_pp3_stage0 = 48'd256;
parameter    ap_ST_fsm_state20 = 48'd512;
parameter    ap_ST_fsm_pp4_stage0 = 48'd1024;
parameter    ap_ST_fsm_state25 = 48'd2048;
parameter    ap_ST_fsm_state26 = 48'd4096;
parameter    ap_ST_fsm_state27 = 48'd8192;
parameter    ap_ST_fsm_state28 = 48'd16384;
parameter    ap_ST_fsm_state29 = 48'd32768;
parameter    ap_ST_fsm_state30 = 48'd65536;
parameter    ap_ST_fsm_state31 = 48'd131072;
parameter    ap_ST_fsm_state32 = 48'd262144;
parameter    ap_ST_fsm_state33 = 48'd524288;
parameter    ap_ST_fsm_state34 = 48'd1048576;
parameter    ap_ST_fsm_state35 = 48'd2097152;
parameter    ap_ST_fsm_state36 = 48'd4194304;
parameter    ap_ST_fsm_state37 = 48'd8388608;
parameter    ap_ST_fsm_state38 = 48'd16777216;
parameter    ap_ST_fsm_state39 = 48'd33554432;
parameter    ap_ST_fsm_state40 = 48'd67108864;
parameter    ap_ST_fsm_state41 = 48'd134217728;
parameter    ap_ST_fsm_state42 = 48'd268435456;
parameter    ap_ST_fsm_state43 = 48'd536870912;
parameter    ap_ST_fsm_state44 = 48'd1073741824;
parameter    ap_ST_fsm_state45 = 48'd2147483648;
parameter    ap_ST_fsm_state46 = 48'd4294967296;
parameter    ap_ST_fsm_state47 = 48'd8589934592;
parameter    ap_ST_fsm_state48 = 48'd17179869184;
parameter    ap_ST_fsm_state49 = 48'd34359738368;
parameter    ap_ST_fsm_state50 = 48'd68719476736;
parameter    ap_ST_fsm_state51 = 48'd137438953472;
parameter    ap_ST_fsm_state52 = 48'd274877906944;
parameter    ap_ST_fsm_state53 = 48'd549755813888;
parameter    ap_ST_fsm_state54 = 48'd1099511627776;
parameter    ap_ST_fsm_state55 = 48'd2199023255552;
parameter    ap_ST_fsm_state56 = 48'd4398046511104;
parameter    ap_ST_fsm_state57 = 48'd8796093022208;
parameter    ap_ST_fsm_pp5_stage0 = 48'd17592186044416;
parameter    ap_ST_fsm_state73 = 48'd35184372088832;
parameter    ap_ST_fsm_pp6_stage0 = 48'd70368744177664;
parameter    ap_ST_fsm_state76 = 48'd140737488355328;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] input_img_address0;
output   input_img_ce0;
input  [31:0] input_img_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_img_ce0;

(* fsm_encoding = "none" *) reg   [47:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] weights_layer1_weights_V_address0;
reg    weights_layer1_weights_V_ce0;
wire   [6:0] weights_layer1_weights_V_q0;
wire   [15:0] weights_layer1_weights_V_address1;
reg    weights_layer1_weights_V_ce1;
wire   [6:0] weights_layer1_weights_V_q1;
wire   [12:0] weights_layer2_weights_V_address0;
reg    weights_layer2_weights_V_ce0;
wire  signed [7:0] weights_layer2_weights_V_q0;
wire   [2:0] layer3_weights_V_0_address0;
reg    layer3_weights_V_0_ce0;
wire  signed [7:0] layer3_weights_V_0_q0;
wire   [2:0] layer3_weights_V_1_address0;
reg    layer3_weights_V_1_ce0;
wire  signed [7:0] layer3_weights_V_1_q0;
wire   [2:0] layer3_weights_V_2_address0;
reg    layer3_weights_V_2_ce0;
wire  signed [7:0] layer3_weights_V_2_q0;
wire   [2:0] layer3_weights_V_3_address0;
reg    layer3_weights_V_3_ce0;
wire  signed [7:0] layer3_weights_V_3_q0;
wire   [2:0] layer3_weights_V_4_address0;
reg    layer3_weights_V_4_ce0;
wire  signed [7:0] layer3_weights_V_4_q0;
wire   [2:0] layer3_weights_V_5_address0;
reg    layer3_weights_V_5_ce0;
wire  signed [7:0] layer3_weights_V_5_q0;
wire   [2:0] layer3_weights_V_6_address0;
reg    layer3_weights_V_6_ce0;
wire  signed [6:0] layer3_weights_V_6_q0;
wire   [2:0] layer3_weights_V_7_address0;
reg    layer3_weights_V_7_ce0;
wire  signed [7:0] layer3_weights_V_7_q0;
wire   [2:0] layer3_weights_V_8_address0;
reg    layer3_weights_V_8_ce0;
wire  signed [7:0] layer3_weights_V_8_q0;
wire   [2:0] layer3_weights_V_9_address0;
reg    layer3_weights_V_9_ce0;
wire  signed [6:0] layer3_weights_V_9_q0;
wire   [2:0] layer3_weights_V_10_address0;
reg    layer3_weights_V_10_ce0;
wire  signed [7:0] layer3_weights_V_10_q0;
wire   [2:0] layer3_weights_V_11_address0;
reg    layer3_weights_V_11_ce0;
wire  signed [6:0] layer3_weights_V_11_q0;
wire   [2:0] layer3_weights_V_12_address0;
reg    layer3_weights_V_12_ce0;
wire  signed [6:0] layer3_weights_V_12_q0;
wire   [2:0] layer3_weights_V_13_address0;
reg    layer3_weights_V_13_ce0;
wire  signed [7:0] layer3_weights_V_13_q0;
wire   [2:0] layer3_weights_V_14_address0;
reg    layer3_weights_V_14_ce0;
wire  signed [7:0] layer3_weights_V_14_q0;
wire   [2:0] layer3_weights_V_15_address0;
reg    layer3_weights_V_15_ce0;
wire  signed [7:0] layer3_weights_V_15_q0;
wire   [2:0] layer3_weights_V_16_address0;
reg    layer3_weights_V_16_ce0;
wire  signed [7:0] layer3_weights_V_16_q0;
wire   [2:0] layer3_weights_V_17_address0;
reg    layer3_weights_V_17_ce0;
wire  signed [7:0] layer3_weights_V_17_q0;
wire   [2:0] layer3_weights_V_18_address0;
reg    layer3_weights_V_18_ce0;
wire  signed [7:0] layer3_weights_V_18_q0;
wire   [2:0] layer3_weights_V_19_address0;
reg    layer3_weights_V_19_ce0;
wire  signed [6:0] layer3_weights_V_19_q0;
wire   [2:0] layer3_weights_V_20_address0;
reg    layer3_weights_V_20_ce0;
wire  signed [7:0] layer3_weights_V_20_q0;
wire   [2:0] layer3_weights_V_21_address0;
reg    layer3_weights_V_21_ce0;
wire  signed [6:0] layer3_weights_V_21_q0;
wire   [2:0] layer3_weights_V_22_address0;
reg    layer3_weights_V_22_ce0;
wire  signed [7:0] layer3_weights_V_22_q0;
wire   [2:0] layer3_weights_V_23_address0;
reg    layer3_weights_V_23_ce0;
wire  signed [7:0] layer3_weights_V_23_q0;
wire   [2:0] layer3_weights_V_24_address0;
reg    layer3_weights_V_24_ce0;
wire  signed [7:0] layer3_weights_V_24_q0;
wire   [2:0] layer3_weights_V_25_address0;
reg    layer3_weights_V_25_ce0;
wire  signed [7:0] layer3_weights_V_25_q0;
wire   [2:0] layer3_weights_V_26_address0;
reg    layer3_weights_V_26_ce0;
wire  signed [7:0] layer3_weights_V_26_q0;
wire   [2:0] layer3_weights_V_27_address0;
reg    layer3_weights_V_27_ce0;
wire  signed [6:0] layer3_weights_V_27_q0;
wire   [2:0] layer3_weights_V_28_address0;
reg    layer3_weights_V_28_ce0;
wire  signed [7:0] layer3_weights_V_28_q0;
wire   [2:0] layer3_weights_V_29_address0;
reg    layer3_weights_V_29_ce0;
wire  signed [7:0] layer3_weights_V_29_q0;
wire   [2:0] layer3_weights_V_30_address0;
reg    layer3_weights_V_30_ce0;
wire  signed [7:0] layer3_weights_V_30_q0;
wire   [2:0] layer3_weights_V_31_address0;
reg    layer3_weights_V_31_ce0;
wire  signed [6:0] layer3_weights_V_31_q0;
wire   [2:0] layer3_weights_V_32_address0;
reg    layer3_weights_V_32_ce0;
wire  signed [7:0] layer3_weights_V_32_q0;
wire   [2:0] layer3_weights_V_33_address0;
reg    layer3_weights_V_33_ce0;
wire  signed [7:0] layer3_weights_V_33_q0;
wire   [2:0] layer3_weights_V_34_address0;
reg    layer3_weights_V_34_ce0;
wire  signed [6:0] layer3_weights_V_34_q0;
wire   [2:0] layer3_weights_V_35_address0;
reg    layer3_weights_V_35_ce0;
wire  signed [7:0] layer3_weights_V_35_q0;
wire   [2:0] layer3_weights_V_36_address0;
reg    layer3_weights_V_36_ce0;
wire  signed [7:0] layer3_weights_V_36_q0;
wire   [2:0] layer3_weights_V_37_address0;
reg    layer3_weights_V_37_ce0;
wire  signed [6:0] layer3_weights_V_37_q0;
wire   [2:0] layer3_weights_V_38_address0;
reg    layer3_weights_V_38_ce0;
wire  signed [6:0] layer3_weights_V_38_q0;
wire   [2:0] layer3_weights_V_39_address0;
reg    layer3_weights_V_39_ce0;
wire  signed [7:0] layer3_weights_V_39_q0;
wire   [2:0] layer3_weights_V_40_address0;
reg    layer3_weights_V_40_ce0;
wire  signed [7:0] layer3_weights_V_40_q0;
wire   [2:0] layer3_weights_V_41_address0;
reg    layer3_weights_V_41_ce0;
wire  signed [7:0] layer3_weights_V_41_q0;
wire   [2:0] layer3_weights_V_42_address0;
reg    layer3_weights_V_42_ce0;
wire  signed [6:0] layer3_weights_V_42_q0;
wire   [2:0] layer3_weights_V_43_address0;
reg    layer3_weights_V_43_ce0;
wire  signed [6:0] layer3_weights_V_43_q0;
wire   [2:0] layer3_weights_V_44_address0;
reg    layer3_weights_V_44_ce0;
wire  signed [6:0] layer3_weights_V_44_q0;
wire   [2:0] layer3_weights_V_45_address0;
reg    layer3_weights_V_45_ce0;
wire  signed [6:0] layer3_weights_V_45_q0;
wire   [2:0] layer3_weights_V_46_address0;
reg    layer3_weights_V_46_ce0;
wire  signed [7:0] layer3_weights_V_46_q0;
wire   [2:0] layer3_weights_V_47_address0;
reg    layer3_weights_V_47_ce0;
wire  signed [7:0] layer3_weights_V_47_q0;
wire   [2:0] layer3_weights_V_48_address0;
reg    layer3_weights_V_48_ce0;
wire  signed [7:0] layer3_weights_V_48_q0;
wire   [2:0] layer3_weights_V_49_address0;
reg    layer3_weights_V_49_ce0;
wire  signed [7:0] layer3_weights_V_49_q0;
wire   [2:0] layer3_weights_V_50_address0;
reg    layer3_weights_V_50_ce0;
wire  signed [7:0] layer3_weights_V_50_q0;
wire   [2:0] layer3_weights_V_51_address0;
reg    layer3_weights_V_51_ce0;
wire  signed [7:0] layer3_weights_V_51_q0;
wire   [2:0] layer3_weights_V_52_address0;
reg    layer3_weights_V_52_ce0;
wire  signed [7:0] layer3_weights_V_52_q0;
wire   [2:0] layer3_weights_V_53_address0;
reg    layer3_weights_V_53_ce0;
wire  signed [6:0] layer3_weights_V_53_q0;
wire   [2:0] layer3_weights_V_54_address0;
reg    layer3_weights_V_54_ce0;
wire  signed [7:0] layer3_weights_V_54_q0;
wire   [2:0] layer3_weights_V_55_address0;
reg    layer3_weights_V_55_ce0;
wire  signed [7:0] layer3_weights_V_55_q0;
wire   [2:0] layer3_weights_V_56_address0;
reg    layer3_weights_V_56_ce0;
wire  signed [6:0] layer3_weights_V_56_q0;
wire   [2:0] layer3_weights_V_57_address0;
reg    layer3_weights_V_57_ce0;
wire  signed [7:0] layer3_weights_V_57_q0;
wire   [2:0] layer3_weights_V_58_address0;
reg    layer3_weights_V_58_ce0;
wire  signed [7:0] layer3_weights_V_58_q0;
wire   [2:0] layer3_weights_V_59_address0;
reg    layer3_weights_V_59_ce0;
wire  signed [7:0] layer3_weights_V_59_q0;
wire   [2:0] layer3_weights_V_60_address0;
reg    layer3_weights_V_60_ce0;
wire  signed [7:0] layer3_weights_V_60_q0;
wire   [2:0] layer3_weights_V_61_address0;
reg    layer3_weights_V_61_ce0;
wire  signed [7:0] layer3_weights_V_61_q0;
wire   [2:0] layer3_weights_V_62_address0;
reg    layer3_weights_V_62_ce0;
wire   [6:0] layer3_weights_V_62_q0;
wire   [2:0] layer3_weights_V_63_address0;
reg    layer3_weights_V_63_ce0;
wire  signed [7:0] layer3_weights_V_63_q0;
reg   [8:0] i_reg_1988;
reg   [8:0] k_reg_2011;
reg   [31:0] sum_V_4_reg_2022;
reg   [7:0] i_1_reg_2035;
reg   [13:0] indvar_flatten_reg_2046;
reg   [6:0] j_1_reg_2057;
reg   [7:0] k_1_reg_2068;
reg   [31:0] sum_V_5_reg_2079;
reg   [6:0] i_2_reg_2091;
reg   [2:0] j_2_reg_2102;
reg   [2:0] i_3_reg_2113;
reg   [31:0] max_idx_V_reg_2125;
reg   [31:0] max_val_V_reg_2137;
wire   [8:0] add_ln5_fu_2156_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln5_fu_2162_p2;
reg   [0:0] icmp_ln5_reg_5864;
reg   [0:0] icmp_ln5_reg_5864_pp0_iter1_reg;
reg   [0:0] icmp_ln5_reg_5864_pp0_iter2_reg;
wire   [63:0] i_cast_fu_2168_p1;
reg   [63:0] i_cast_reg_5868;
reg   [63:0] i_cast_reg_5868_pp0_iter1_reg;
reg   [63:0] i_cast_reg_5868_pp0_iter2_reg;
reg   [31:0] input_img_load_reg_5878;
reg   [31:0] input_img_load_reg_5878_pp0_iter2_reg;
reg   [0:0] p_Result_8_reg_5888;
wire   [51:0] trunc_ln565_fu_2208_p1;
reg   [51:0] trunc_ln565_reg_5893;
wire   [0:0] icmp_ln571_fu_2212_p2;
reg   [0:0] icmp_ln571_reg_5898;
wire   [11:0] F2_fu_2218_p2;
reg   [11:0] F2_reg_5906;
wire   [5:0] temp_output2_0_V_addr_reg_5914;
wire    ap_CS_fsm_state6;
wire   [7:0] add_ln21_fu_2444_p2;
reg   [7:0] add_ln21_reg_5919;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln21_fu_2450_p2;
wire   [63:0] zext_ln21_fu_2456_p1;
reg   [63:0] zext_ln21_reg_5928;
wire   [15:0] zext_ln21_1_fu_2460_p1;
reg   [15:0] zext_ln21_1_reg_5933;
wire   [0:0] icmp_ln25_fu_2464_p2;
reg   [0:0] icmp_ln25_reg_5938;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_state10_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln25_reg_5938_pp1_iter1_reg;
wire   [8:0] add_ln25_fu_2470_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [31:0] fp_input_img_V_q1;
reg  signed [31:0] r_V_reg_5967;
reg    ap_enable_reg_pp1_iter1;
reg  signed [6:0] weights_layer1_weights_V_load_reg_5972;
wire   [31:0] fp_input_img_V_q0;
reg  signed [31:0] r_V_2_reg_5977;
reg  signed [6:0] weights_layer1_weights_V_load_1_reg_5982;
reg    ap_enable_reg_pp1_iter2;
wire   [7:0] add_ln77_fu_2613_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state12_pp2_stage0_iter0;
wire    ap_block_state13_pp2_stage0_iter1;
wire    ap_block_state14_pp2_stage0_iter2;
wire    ap_block_state15_pp2_stage0_iter3;
wire    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln77_fu_2619_p2;
reg   [6:0] temp_output_0_V_addr_1_reg_6001;
reg   [6:0] temp_output_0_V_addr_1_reg_6001_pp2_iter1_reg;
reg   [6:0] temp_output_0_V_addr_1_reg_6001_pp2_iter2_reg;
wire   [0:0] icmp_ln885_fu_2630_p2;
reg   [0:0] icmp_ln885_reg_6007;
reg   [0:0] icmp_ln885_reg_6007_pp2_iter2_reg;
wire   [0:0] p_Result_10_fu_2636_p3;
reg   [0:0] p_Result_10_reg_6011;
wire   [31:0] tmp_V_4_fu_2650_p3;
reg   [31:0] tmp_V_4_reg_6016;
wire   [0:0] icmp_ln908_fu_2770_p2;
reg   [0:0] icmp_ln908_reg_6021;
wire   [31:0] add_ln908_fu_2784_p2;
reg   [31:0] add_ln908_reg_6026;
wire   [31:0] sub_ln909_fu_2796_p2;
reg   [31:0] sub_ln909_reg_6031;
wire   [0:0] select_ln908_fu_2802_p3;
reg   [0:0] select_ln908_reg_6036;
wire   [10:0] trunc_ln893_fu_2810_p1;
reg   [10:0] trunc_ln893_reg_6041;
wire   [63:0] bitcast_ln734_fu_2911_p1;
wire   [0:0] icmp_ln1506_fu_2926_p2;
reg   [0:0] icmp_ln1506_reg_6051;
wire   [0:0] icmp_ln1506_1_fu_2932_p2;
reg   [0:0] icmp_ln1506_1_reg_6056;
wire   [13:0] add_ln40_1_fu_2948_p2;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state17_pp3_stage0_iter0;
wire    ap_block_state18_pp3_stage0_iter1;
wire    ap_block_state19_pp3_stage0_iter2;
wire    ap_block_pp3_stage0_11001;
wire   [0:0] icmp_ln40_fu_2954_p2;
reg   [0:0] icmp_ln40_reg_6069;
reg   [0:0] icmp_ln40_reg_6069_pp3_iter1_reg;
wire   [0:0] icmp_ln44_fu_2966_p2;
reg   [0:0] icmp_ln44_reg_6073;
wire   [6:0] select_ln40_1_fu_2980_p3;
reg   [6:0] select_ln40_1_reg_6078;
reg   [6:0] select_ln40_1_reg_6078_pp3_iter1_reg;
wire   [7:0] add_ln44_fu_3020_p2;
reg   [7:0] add_ln44_reg_6094;
wire   [0:0] ifzero_fu_3026_p2;
reg   [0:0] ifzero_reg_6099;
reg   [0:0] ifzero_reg_6099_pp3_iter1_reg;
reg   [31:0] sum_V_2_reg_6103;
reg    ap_enable_reg_pp3_iter1;
wire   [6:0] add_ln92_fu_3081_p2;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_state21_pp4_stage0_iter0;
wire    ap_block_state22_pp4_stage0_iter1;
wire    ap_block_state23_pp4_stage0_iter2;
wire    ap_block_state24_pp4_stage0_iter3;
wire    ap_block_pp4_stage0_11001;
wire   [0:0] icmp_ln92_fu_3087_p2;
reg   [5:0] temp_output2_0_V_addr_1_reg_6118;
reg   [5:0] temp_output2_0_V_addr_1_reg_6118_pp4_iter1_reg;
reg   [5:0] temp_output2_0_V_addr_1_reg_6118_pp4_iter2_reg;
wire   [0:0] icmp_ln885_1_fu_3098_p2;
reg   [0:0] icmp_ln885_1_reg_6124;
reg   [0:0] icmp_ln885_1_reg_6124_pp4_iter2_reg;
wire   [0:0] p_Result_14_fu_3104_p3;
reg   [0:0] p_Result_14_reg_6128;
wire   [31:0] tmp_V_5_fu_3118_p3;
reg   [31:0] tmp_V_5_reg_6133;
wire   [0:0] icmp_ln908_1_fu_3238_p2;
reg   [0:0] icmp_ln908_1_reg_6138;
wire   [31:0] add_ln908_1_fu_3252_p2;
reg   [31:0] add_ln908_1_reg_6143;
wire   [31:0] sub_ln909_1_fu_3264_p2;
reg   [31:0] sub_ln909_1_reg_6148;
wire   [0:0] select_ln908_2_fu_3270_p3;
reg   [0:0] select_ln908_2_reg_6153;
wire   [10:0] trunc_ln893_1_fu_3278_p1;
reg   [10:0] trunc_ln893_1_reg_6158;
wire   [63:0] bitcast_ln734_1_fu_3379_p1;
wire   [0:0] icmp_ln1506_2_fu_3394_p2;
reg   [0:0] icmp_ln1506_2_reg_6168;
wire   [0:0] icmp_ln1506_3_fu_3400_p2;
reg   [0:0] icmp_ln1506_3_reg_6173;
wire    ap_CS_fsm_state25;
wire   [31:0] temp_output2_0_V_q0;
reg   [31:0] temp_output2_0_V_load_reg_6186;
wire    ap_CS_fsm_state26;
wire   [31:0] temp_output2_0_V_q1;
reg   [31:0] temp_output2_0_V_load_1_reg_6191;
reg   [31:0] temp_output2_0_V_load_2_reg_6206;
wire    ap_CS_fsm_state27;
reg   [31:0] temp_output2_0_V_load_3_reg_6211;
reg   [31:0] temp_output2_0_V_load_4_reg_6226;
wire    ap_CS_fsm_state28;
reg   [31:0] temp_output2_0_V_load_5_reg_6231;
reg   [31:0] temp_output2_0_V_load_6_reg_6246;
wire    ap_CS_fsm_state29;
reg   [31:0] temp_output2_0_V_load_7_reg_6251;
reg   [31:0] temp_output2_0_V_load_8_reg_6266;
wire    ap_CS_fsm_state30;
reg   [31:0] temp_output2_0_V_load_9_reg_6271;
reg   [31:0] temp_output2_0_V_load_10_reg_6286;
wire    ap_CS_fsm_state31;
reg   [31:0] temp_output2_0_V_load_11_reg_6291;
reg   [31:0] temp_output2_0_V_load_12_reg_6306;
wire    ap_CS_fsm_state32;
reg   [31:0] temp_output2_0_V_load_13_reg_6311;
reg   [31:0] temp_output2_0_V_load_14_reg_6326;
wire    ap_CS_fsm_state33;
reg   [31:0] temp_output2_0_V_load_15_reg_6331;
reg   [31:0] temp_output2_0_V_load_16_reg_6346;
wire    ap_CS_fsm_state34;
reg   [31:0] temp_output2_0_V_load_17_reg_6351;
reg   [31:0] temp_output2_0_V_load_18_reg_6366;
wire    ap_CS_fsm_state35;
reg   [31:0] temp_output2_0_V_load_19_reg_6371;
reg   [31:0] temp_output2_0_V_load_20_reg_6386;
wire    ap_CS_fsm_state36;
reg   [31:0] temp_output2_0_V_load_21_reg_6391;
reg   [31:0] temp_output2_0_V_load_22_reg_6406;
wire    ap_CS_fsm_state37;
reg   [31:0] temp_output2_0_V_load_23_reg_6411;
reg   [31:0] temp_output2_0_V_load_24_reg_6426;
wire    ap_CS_fsm_state38;
reg   [31:0] temp_output2_0_V_load_25_reg_6431;
reg   [31:0] temp_output2_0_V_load_26_reg_6446;
wire    ap_CS_fsm_state39;
reg   [31:0] temp_output2_0_V_load_27_reg_6451;
reg   [31:0] temp_output2_0_V_load_28_reg_6466;
wire    ap_CS_fsm_state40;
reg   [31:0] temp_output2_0_V_load_29_reg_6471;
reg   [31:0] temp_output2_0_V_load_30_reg_6486;
wire    ap_CS_fsm_state41;
reg   [31:0] temp_output2_0_V_load_31_reg_6491;
reg   [31:0] temp_output2_0_V_load_32_reg_6506;
wire    ap_CS_fsm_state42;
reg   [31:0] temp_output2_0_V_load_33_reg_6511;
reg   [31:0] temp_output2_0_V_load_34_reg_6526;
wire    ap_CS_fsm_state43;
reg   [31:0] temp_output2_0_V_load_35_reg_6531;
reg   [31:0] temp_output2_0_V_load_36_reg_6546;
wire    ap_CS_fsm_state44;
reg   [31:0] temp_output2_0_V_load_37_reg_6551;
reg   [31:0] temp_output2_0_V_load_38_reg_6566;
wire    ap_CS_fsm_state45;
reg   [31:0] temp_output2_0_V_load_39_reg_6571;
reg   [31:0] temp_output2_0_V_load_40_reg_6586;
wire    ap_CS_fsm_state46;
reg   [31:0] temp_output2_0_V_load_41_reg_6591;
reg   [31:0] temp_output2_0_V_load_42_reg_6606;
wire    ap_CS_fsm_state47;
reg   [31:0] temp_output2_0_V_load_43_reg_6611;
reg   [31:0] temp_output2_0_V_load_44_reg_6626;
wire    ap_CS_fsm_state48;
reg   [31:0] temp_output2_0_V_load_45_reg_6631;
reg   [31:0] temp_output2_0_V_load_46_reg_6646;
wire    ap_CS_fsm_state49;
reg   [31:0] temp_output2_0_V_load_47_reg_6651;
reg   [31:0] temp_output2_0_V_load_48_reg_6666;
wire    ap_CS_fsm_state50;
reg   [31:0] temp_output2_0_V_load_49_reg_6671;
reg   [31:0] temp_output2_0_V_load_50_reg_6686;
wire    ap_CS_fsm_state51;
reg   [31:0] temp_output2_0_V_load_51_reg_6691;
reg   [31:0] temp_output2_0_V_load_52_reg_6706;
wire    ap_CS_fsm_state52;
reg   [31:0] temp_output2_0_V_load_53_reg_6711;
reg   [31:0] temp_output2_0_V_load_54_reg_6726;
wire    ap_CS_fsm_state53;
reg   [31:0] temp_output2_0_V_load_55_reg_6731;
reg   [31:0] temp_output2_0_V_load_56_reg_6746;
wire    ap_CS_fsm_state54;
reg   [31:0] temp_output2_0_V_load_57_reg_6751;
reg   [31:0] temp_output2_0_V_load_58_reg_6766;
wire    ap_CS_fsm_state55;
reg   [31:0] temp_output2_0_V_load_59_reg_6771;
reg   [31:0] temp_output2_0_V_load_60_reg_6786;
wire    ap_CS_fsm_state56;
reg   [31:0] temp_output2_0_V_load_61_reg_6791;
wire  signed [39:0] sext_ln1116_fu_3416_p1;
reg  signed [39:0] sext_ln1116_reg_6806;
wire    ap_CS_fsm_state57;
wire  signed [39:0] sext_ln1116_1_fu_3419_p1;
reg  signed [39:0] sext_ln1116_1_reg_6811;
wire  signed [39:0] sext_ln1116_2_fu_3422_p1;
reg  signed [39:0] sext_ln1116_2_reg_6816;
wire  signed [39:0] sext_ln1116_3_fu_3425_p1;
reg  signed [39:0] sext_ln1116_3_reg_6821;
wire  signed [39:0] sext_ln1116_4_fu_3428_p1;
reg  signed [39:0] sext_ln1116_4_reg_6826;
wire  signed [39:0] sext_ln1116_5_fu_3431_p1;
reg  signed [39:0] sext_ln1116_5_reg_6831;
wire  signed [38:0] sext_ln1116_6_fu_3434_p1;
reg  signed [38:0] sext_ln1116_6_reg_6836;
wire  signed [39:0] sext_ln1116_7_fu_3437_p1;
reg  signed [39:0] sext_ln1116_7_reg_6841;
wire  signed [39:0] sext_ln1116_8_fu_3440_p1;
reg  signed [39:0] sext_ln1116_8_reg_6846;
wire  signed [38:0] sext_ln1116_9_fu_3443_p1;
reg  signed [38:0] sext_ln1116_9_reg_6851;
wire  signed [39:0] sext_ln1116_10_fu_3446_p1;
reg  signed [39:0] sext_ln1116_10_reg_6856;
wire  signed [38:0] sext_ln1116_11_fu_3449_p1;
reg  signed [38:0] sext_ln1116_11_reg_6861;
wire  signed [38:0] sext_ln1116_12_fu_3452_p1;
reg  signed [38:0] sext_ln1116_12_reg_6866;
wire  signed [39:0] sext_ln1116_13_fu_3455_p1;
reg  signed [39:0] sext_ln1116_13_reg_6871;
wire  signed [39:0] sext_ln1116_14_fu_3458_p1;
reg  signed [39:0] sext_ln1116_14_reg_6876;
wire  signed [39:0] sext_ln1116_15_fu_3461_p1;
reg  signed [39:0] sext_ln1116_15_reg_6881;
wire  signed [39:0] sext_ln1116_16_fu_3464_p1;
reg  signed [39:0] sext_ln1116_16_reg_6886;
wire  signed [39:0] sext_ln1116_17_fu_3467_p1;
reg  signed [39:0] sext_ln1116_17_reg_6891;
wire  signed [39:0] sext_ln1116_18_fu_3470_p1;
reg  signed [39:0] sext_ln1116_18_reg_6896;
wire  signed [38:0] sext_ln1116_19_fu_3473_p1;
reg  signed [38:0] sext_ln1116_19_reg_6901;
wire  signed [39:0] sext_ln1116_20_fu_3476_p1;
reg  signed [39:0] sext_ln1116_20_reg_6906;
wire  signed [38:0] sext_ln1116_21_fu_3479_p1;
reg  signed [38:0] sext_ln1116_21_reg_6911;
wire  signed [39:0] sext_ln1116_22_fu_3482_p1;
reg  signed [39:0] sext_ln1116_22_reg_6916;
wire  signed [39:0] sext_ln1116_23_fu_3485_p1;
reg  signed [39:0] sext_ln1116_23_reg_6921;
wire  signed [39:0] sext_ln1116_24_fu_3488_p1;
reg  signed [39:0] sext_ln1116_24_reg_6926;
wire  signed [39:0] sext_ln1116_25_fu_3491_p1;
reg  signed [39:0] sext_ln1116_25_reg_6931;
wire  signed [39:0] sext_ln1116_26_fu_3494_p1;
reg  signed [39:0] sext_ln1116_26_reg_6936;
wire  signed [38:0] sext_ln1116_27_fu_3497_p1;
reg  signed [38:0] sext_ln1116_27_reg_6941;
wire  signed [39:0] sext_ln1116_28_fu_3500_p1;
reg  signed [39:0] sext_ln1116_28_reg_6946;
wire  signed [39:0] sext_ln1116_29_fu_3503_p1;
reg  signed [39:0] sext_ln1116_29_reg_6951;
wire  signed [39:0] sext_ln1116_30_fu_3506_p1;
reg  signed [39:0] sext_ln1116_30_reg_6956;
wire  signed [38:0] sext_ln1116_31_fu_3509_p1;
reg  signed [38:0] sext_ln1116_31_reg_6961;
wire  signed [39:0] sext_ln1116_32_fu_3512_p1;
reg  signed [39:0] sext_ln1116_32_reg_6966;
wire  signed [39:0] sext_ln1116_33_fu_3515_p1;
reg  signed [39:0] sext_ln1116_33_reg_6971;
wire  signed [38:0] sext_ln1116_34_fu_3518_p1;
reg  signed [38:0] sext_ln1116_34_reg_6976;
wire  signed [39:0] sext_ln1116_35_fu_3521_p1;
reg  signed [39:0] sext_ln1116_35_reg_6981;
wire  signed [39:0] sext_ln1116_36_fu_3524_p1;
reg  signed [39:0] sext_ln1116_36_reg_6986;
wire  signed [38:0] sext_ln1116_37_fu_3527_p1;
reg  signed [38:0] sext_ln1116_37_reg_6991;
wire  signed [38:0] sext_ln1116_38_fu_3530_p1;
reg  signed [38:0] sext_ln1116_38_reg_6996;
wire  signed [39:0] sext_ln1116_39_fu_3533_p1;
reg  signed [39:0] sext_ln1116_39_reg_7001;
wire  signed [39:0] sext_ln1116_40_fu_3536_p1;
reg  signed [39:0] sext_ln1116_40_reg_7006;
wire  signed [39:0] sext_ln1116_41_fu_3539_p1;
reg  signed [39:0] sext_ln1116_41_reg_7011;
wire  signed [38:0] sext_ln1116_42_fu_3542_p1;
reg  signed [38:0] sext_ln1116_42_reg_7016;
wire  signed [38:0] sext_ln1116_43_fu_3545_p1;
reg  signed [38:0] sext_ln1116_43_reg_7021;
wire  signed [38:0] sext_ln1116_44_fu_3548_p1;
reg  signed [38:0] sext_ln1116_44_reg_7026;
wire  signed [38:0] sext_ln1116_45_fu_3551_p1;
reg  signed [38:0] sext_ln1116_45_reg_7031;
wire  signed [39:0] sext_ln1116_46_fu_3554_p1;
reg  signed [39:0] sext_ln1116_46_reg_7036;
wire  signed [39:0] sext_ln1116_47_fu_3557_p1;
reg  signed [39:0] sext_ln1116_47_reg_7041;
wire  signed [39:0] sext_ln1116_48_fu_3560_p1;
reg  signed [39:0] sext_ln1116_48_reg_7046;
wire  signed [39:0] sext_ln1116_49_fu_3563_p1;
reg  signed [39:0] sext_ln1116_49_reg_7051;
wire  signed [39:0] sext_ln1116_50_fu_3566_p1;
reg  signed [39:0] sext_ln1116_50_reg_7056;
wire  signed [39:0] sext_ln1116_51_fu_3569_p1;
reg  signed [39:0] sext_ln1116_51_reg_7061;
wire  signed [39:0] sext_ln1116_52_fu_3572_p1;
reg  signed [39:0] sext_ln1116_52_reg_7066;
wire  signed [38:0] sext_ln1116_53_fu_3575_p1;
reg  signed [38:0] sext_ln1116_53_reg_7071;
wire  signed [39:0] sext_ln1116_54_fu_3578_p1;
reg  signed [39:0] sext_ln1116_54_reg_7076;
wire  signed [39:0] sext_ln1116_55_fu_3581_p1;
reg  signed [39:0] sext_ln1116_55_reg_7081;
wire  signed [38:0] sext_ln1116_56_fu_3584_p1;
reg  signed [38:0] sext_ln1116_56_reg_7086;
wire  signed [39:0] sext_ln1116_57_fu_3587_p1;
reg  signed [39:0] sext_ln1116_57_reg_7091;
wire  signed [39:0] sext_ln1116_58_fu_3590_p1;
reg  signed [39:0] sext_ln1116_58_reg_7096;
wire  signed [39:0] sext_ln1116_59_fu_3593_p1;
reg  signed [39:0] sext_ln1116_59_reg_7101;
wire  signed [39:0] sext_ln1116_60_fu_3596_p1;
reg  signed [39:0] sext_ln1116_60_reg_7106;
wire  signed [39:0] sext_ln1116_61_fu_3599_p1;
reg  signed [39:0] sext_ln1116_61_reg_7111;
wire  signed [38:0] sext_ln1116_62_fu_3602_p1;
reg  signed [38:0] sext_ln1116_62_reg_7116;
wire  signed [39:0] temp_output2_0_V_load_63_cast_fu_3606_p1;
reg  signed [39:0] temp_output2_0_V_load_63_cast_reg_7121;
wire   [2:0] add_ln59_fu_3610_p2;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter0;
wire    ap_block_state58_pp5_stage0_iter0;
wire    ap_block_state59_pp5_stage0_iter1;
wire    ap_block_state60_pp5_stage0_iter2;
wire    ap_block_state61_pp5_stage0_iter3;
wire    ap_block_state62_pp5_stage0_iter4;
wire    ap_block_state63_pp5_stage0_iter5;
wire    ap_block_state64_pp5_stage0_iter6;
wire    ap_block_state65_pp5_stage0_iter7;
wire    ap_block_state66_pp5_stage0_iter8;
wire    ap_block_state67_pp5_stage0_iter9;
wire    ap_block_state68_pp5_stage0_iter10;
wire    ap_block_state69_pp5_stage0_iter11;
wire    ap_block_state70_pp5_stage0_iter12;
wire    ap_block_state71_pp5_stage0_iter13;
wire    ap_block_state72_pp5_stage0_iter14;
wire    ap_block_pp5_stage0_11001;
wire   [0:0] icmp_ln59_fu_3616_p2;
reg   [0:0] icmp_ln59_reg_7131;
reg   [0:0] icmp_ln59_reg_7131_pp5_iter1_reg;
reg   [0:0] icmp_ln59_reg_7131_pp5_iter2_reg;
reg   [0:0] icmp_ln59_reg_7131_pp5_iter3_reg;
reg   [0:0] icmp_ln59_reg_7131_pp5_iter4_reg;
reg   [0:0] icmp_ln59_reg_7131_pp5_iter5_reg;
reg   [0:0] icmp_ln59_reg_7131_pp5_iter6_reg;
reg   [0:0] icmp_ln59_reg_7131_pp5_iter7_reg;
reg   [0:0] icmp_ln59_reg_7131_pp5_iter8_reg;
reg   [0:0] icmp_ln59_reg_7131_pp5_iter9_reg;
reg   [0:0] icmp_ln59_reg_7131_pp5_iter10_reg;
reg   [0:0] icmp_ln59_reg_7131_pp5_iter11_reg;
reg   [0:0] icmp_ln59_reg_7131_pp5_iter12_reg;
reg   [0:0] icmp_ln59_reg_7131_pp5_iter13_reg;
wire   [63:0] j_2_cast_fu_3622_p1;
reg   [63:0] j_2_cast_reg_7135;
reg   [63:0] j_2_cast_reg_7135_pp5_iter1_reg;
reg   [63:0] j_2_cast_reg_7135_pp5_iter2_reg;
reg   [63:0] j_2_cast_reg_7135_pp5_iter3_reg;
reg   [63:0] j_2_cast_reg_7135_pp5_iter4_reg;
reg   [63:0] j_2_cast_reg_7135_pp5_iter5_reg;
reg   [63:0] j_2_cast_reg_7135_pp5_iter6_reg;
reg   [63:0] j_2_cast_reg_7135_pp5_iter7_reg;
reg   [63:0] j_2_cast_reg_7135_pp5_iter8_reg;
reg   [63:0] j_2_cast_reg_7135_pp5_iter9_reg;
reg   [63:0] j_2_cast_reg_7135_pp5_iter10_reg;
reg   [63:0] j_2_cast_reg_7135_pp5_iter11_reg;
reg   [63:0] j_2_cast_reg_7135_pp5_iter12_reg;
reg   [63:0] j_2_cast_reg_7135_pp5_iter13_reg;
wire   [39:0] mul_ln703_2_fu_3711_p2;
reg   [39:0] mul_ln703_2_reg_7228;
reg   [31:0] tmp_11_reg_7233;
wire   [39:0] mul_ln703_3_fu_3730_p2;
reg   [39:0] mul_ln703_3_reg_7238;
wire   [39:0] mul_ln703_4_fu_3739_p2;
reg   [39:0] mul_ln703_4_reg_7243;
wire   [39:0] mul_ln703_6_fu_3876_p2;
reg   [39:0] mul_ln703_6_reg_7273;
reg   [31:0] tmp_16_reg_7278;
wire   [38:0] mul_ln1118_4_fu_3895_p2;
reg   [38:0] mul_ln1118_4_reg_7283;
wire   [39:0] mul_ln703_7_fu_3904_p2;
reg   [39:0] mul_ln703_7_reg_7288;
wire   [39:0] mul_ln703_8_fu_4049_p2;
reg   [39:0] mul_ln703_8_reg_7318;
reg   [31:0] tmp_21_reg_7323;
wire   [39:0] mul_ln703_9_fu_4068_p2;
reg   [39:0] mul_ln703_9_reg_7328;
wire   [39:0] mul_ln703_10_fu_4077_p2;
reg   [39:0] mul_ln703_10_reg_7333;
wire   [39:0] mul_ln703_13_fu_4210_p2;
reg   [39:0] mul_ln703_13_reg_7363;
reg   [31:0] tmp_26_reg_7368;
wire   [38:0] mul_ln1118_7_fu_4229_p2;
reg   [38:0] mul_ln1118_7_reg_7373;
wire   [39:0] mul_ln703_14_fu_4238_p2;
reg   [39:0] mul_ln703_14_reg_7378;
wire   [39:0] mul_ln703_16_fu_4379_p2;
reg   [39:0] mul_ln703_16_reg_7408;
reg   [31:0] tmp_31_reg_7413;
wire   [39:0] mul_ln703_17_fu_4398_p2;
reg   [39:0] mul_ln703_17_reg_7418;
wire   [39:0] mul_ln703_18_fu_4407_p2;
reg   [39:0] mul_ln703_18_reg_7423;
wire   [39:0] mul_ln703_20_fu_4544_p2;
reg   [39:0] mul_ln703_20_reg_7453;
reg   [31:0] tmp_36_reg_7458;
wire   [39:0] mul_ln703_21_fu_4563_p2;
reg   [39:0] mul_ln703_21_reg_7463;
wire   [39:0] mul_ln703_22_fu_4572_p2;
reg   [39:0] mul_ln703_22_reg_7468;
wire   [39:0] mul_ln703_24_fu_4709_p2;
reg   [39:0] mul_ln703_24_reg_7498;
reg   [31:0] tmp_41_reg_7503;
wire   [38:0] mul_ln1118_11_fu_4728_p2;
reg   [38:0] mul_ln1118_11_reg_7508;
wire   [39:0] mul_ln703_25_fu_4737_p2;
reg   [39:0] mul_ln703_25_reg_7513;
wire   [38:0] mul_ln1118_13_fu_4878_p2;
reg   [38:0] mul_ln1118_13_reg_7543;
reg   [31:0] tmp_46_reg_7548;
wire   [39:0] mul_ln703_27_fu_4897_p2;
reg   [39:0] mul_ln703_27_reg_7553;
wire   [39:0] mul_ln703_28_fu_4906_p2;
reg   [39:0] mul_ln703_28_reg_7558;
wire   [38:0] mul_ln1118_15_fu_5047_p2;
reg   [38:0] mul_ln1118_15_reg_7588;
reg   [31:0] tmp_51_reg_7593;
wire   [38:0] mul_ln1118_16_fu_5066_p2;
reg   [38:0] mul_ln1118_16_reg_7598;
wire   [38:0] mul_ln1118_17_fu_5075_p2;
reg   [38:0] mul_ln1118_17_reg_7603;
wire   [39:0] mul_ln703_32_fu_5220_p2;
reg   [39:0] mul_ln703_32_reg_7633;
reg   [31:0] tmp_56_reg_7638;
wire   [39:0] mul_ln703_33_fu_5239_p2;
reg   [39:0] mul_ln703_33_reg_7643;
wire   [39:0] mul_ln703_34_fu_5248_p2;
reg   [39:0] mul_ln703_34_reg_7648;
wire   [38:0] mul_ln1118_18_fu_5381_p2;
reg   [38:0] mul_ln1118_18_reg_7678;
reg   [31:0] tmp_61_reg_7683;
wire   [39:0] mul_ln703_37_fu_5400_p2;
reg   [39:0] mul_ln703_37_reg_7688;
wire   [39:0] mul_ln703_38_fu_5409_p2;
reg   [39:0] mul_ln703_38_reg_7693;
wire   [39:0] mul_ln703_40_fu_5550_p2;
reg   [39:0] mul_ln703_40_reg_7718;
reg   [31:0] tmp_66_reg_7723;
wire   [39:0] mul_ln703_41_fu_5569_p2;
reg   [39:0] mul_ln703_41_reg_7728;
reg  signed [6:0] layer3_weights_V_62_load_reg_7748;
reg   [31:0] tmp_70_reg_7753;
wire   [2:0] add_ln109_fu_5754_p2;
reg   [2:0] add_ln109_reg_7763;
wire    ap_CS_fsm_pp6_stage0;
reg    ap_enable_reg_pp6_iter0;
wire    ap_block_state74_pp6_stage0_iter0;
wire    ap_block_state75_pp6_stage0_iter1;
wire    ap_block_pp6_stage0_11001;
wire   [0:0] icmp_ln109_fu_5760_p2;
reg   [0:0] icmp_ln109_reg_7768;
wire   [31:0] max_val_V_1_fu_5777_p3;
reg    ap_enable_reg_pp6_iter1;
wire   [31:0] max_idx_V_1_fu_5797_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_condition_pp1_exit_iter1_state9;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state12;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
wire    ap_CS_fsm_state16;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state17;
reg    ap_enable_reg_pp3_iter2;
wire    ap_CS_fsm_state20;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state21;
reg    ap_enable_reg_pp4_iter1;
reg    ap_enable_reg_pp4_iter2;
reg    ap_enable_reg_pp4_iter3;
wire    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state58;
reg    ap_enable_reg_pp5_iter1;
reg    ap_enable_reg_pp5_iter2;
reg    ap_enable_reg_pp5_iter3;
reg    ap_enable_reg_pp5_iter4;
reg    ap_enable_reg_pp5_iter5;
reg    ap_enable_reg_pp5_iter6;
reg    ap_enable_reg_pp5_iter7;
reg    ap_enable_reg_pp5_iter8;
reg    ap_enable_reg_pp5_iter9;
reg    ap_enable_reg_pp5_iter10;
reg    ap_enable_reg_pp5_iter11;
reg    ap_enable_reg_pp5_iter12;
reg    ap_enable_reg_pp5_iter13;
reg    ap_enable_reg_pp5_iter14;
wire    ap_CS_fsm_state73;
wire    ap_block_pp6_stage0_subdone;
reg    ap_condition_pp6_flush_enable;
reg   [8:0] fp_input_img_V_address0;
reg    fp_input_img_V_ce0;
reg    fp_input_img_V_we0;
reg   [31:0] fp_input_img_V_d0;
wire   [8:0] fp_input_img_V_address1;
reg    fp_input_img_V_ce1;
reg   [6:0] temp_output_0_V_address0;
reg    temp_output_0_V_ce0;
reg    temp_output_0_V_we0;
reg   [31:0] temp_output_0_V_d0;
reg   [6:0] temp_output_0_V_address1;
reg    temp_output_0_V_ce1;
wire  signed [31:0] temp_output_0_V_q1;
reg   [5:0] temp_output2_0_V_address0;
reg    temp_output2_0_V_ce0;
reg    temp_output2_0_V_we0;
reg   [31:0] temp_output2_0_V_d0;
reg   [5:0] temp_output2_0_V_address1;
reg    temp_output2_0_V_ce1;
reg   [2:0] temp_output3_0_V_address0;
reg    temp_output3_0_V_ce0;
reg    temp_output3_0_V_we0;
reg   [31:0] temp_output3_0_V_d0;
wire   [31:0] temp_output3_0_V_q0;
reg   [7:0] j_reg_1999;
wire    ap_CS_fsm_state11;
wire    ap_block_pp1_stage0;
reg   [6:0] ap_phi_mux_j_1_phi_fu_2061_p4;
wire    ap_block_pp3_stage0;
reg   [7:0] ap_phi_mux_k_1_phi_fu_2072_p4;
reg   [31:0] ap_phi_mux_sum_V_5_phi_fu_2083_p4;
reg   [2:0] ap_phi_mux_i_3_phi_fu_2117_p4;
wire    ap_block_pp6_stage0;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln1118_fu_2499_p1;
wire   [63:0] k_cast58_fu_2476_p1;
wire   [63:0] zext_ln1118_1_fu_2528_p1;
wire   [63:0] zext_ln23_fu_2510_p1;
wire   [63:0] i_1_cast_fu_2625_p1;
wire    ap_block_pp2_stage0;
wire   [63:0] zext_ln1118_2_fu_3015_p1;
wire   [63:0] k_1_cast_fu_2992_p1;
wire   [63:0] zext_ln40_fu_3077_p1;
wire   [63:0] i_2_cast_fu_3093_p1;
wire    ap_block_pp4_stage0;
wire    ap_block_pp5_stage0;
wire   [63:0] trunc_ln731_cast59_fu_5766_p1;
wire   [31:0] select_ln571_4_fu_2435_p3;
wire   [0:0] and_ln1506_fu_2942_p2;
wire   [0:0] and_ln1506_1_fu_3410_p2;
wire   [31:0] grp_fu_2148_p0;
reg   [63:0] grp_fu_2151_p0;
wire   [63:0] grp_fu_2148_p1;
wire   [63:0] ireg_fu_2178_p1;
wire   [10:0] exp_tmp_fu_2194_p4;
wire   [62:0] trunc_ln555_fu_2182_p1;
wire   [11:0] zext_ln455_fu_2204_p1;
wire   [52:0] p_Result_9_fu_2224_p3;
wire   [53:0] zext_ln569_fu_2231_p1;
wire   [53:0] man_V_1_fu_2235_p2;
wire   [0:0] icmp_ln581_fu_2248_p2;
wire   [11:0] add_ln581_fu_2253_p2;
wire   [11:0] sub_ln581_fu_2258_p2;
wire  signed [11:0] sh_amt_fu_2263_p3;
wire   [53:0] man_V_2_fu_2241_p3;
wire   [6:0] tmp_5_fu_2284_p4;
wire  signed [31:0] sext_ln581_fu_2271_p1;
wire   [53:0] zext_ln586_fu_2300_p1;
wire   [53:0] ashr_ln586_fu_2304_p2;
wire   [0:0] tmp_10_fu_2314_p3;
wire   [31:0] trunc_ln583_fu_2280_p1;
wire   [0:0] icmp_ln582_fu_2275_p2;
wire   [0:0] xor_ln571_fu_2335_p2;
wire   [0:0] or_ln582_fu_2346_p2;
wire   [0:0] xor_ln582_fu_2351_p2;
wire   [0:0] and_ln581_fu_2357_p2;
wire   [0:0] icmp_ln585_fu_2363_p2;
wire   [0:0] or_ln581_fu_2375_p2;
wire   [0:0] icmp_ln603_fu_2294_p2;
wire   [0:0] xor_ln581_fu_2381_p2;
wire   [31:0] shl_ln604_fu_2329_p2;
wire   [0:0] and_ln603_fu_2387_p2;
wire   [0:0] and_ln585_fu_2369_p2;
wire   [31:0] select_ln588_fu_2321_p3;
wire   [31:0] trunc_ln586_fu_2310_p1;
wire   [0:0] and_ln582_fu_2340_p2;
wire   [0:0] or_ln571_fu_2400_p2;
wire   [31:0] select_ln571_fu_2393_p3;
wire   [31:0] select_ln571_1_fu_2405_p3;
wire   [0:0] or_ln571_1_fu_2429_p2;
wire   [31:0] select_ln571_3_fu_2421_p3;
wire   [31:0] select_ln571_2_fu_2413_p3;
wire   [7:0] tmp_6_fu_2481_p4;
wire   [15:0] tmp_7_fu_2491_p3;
wire   [8:0] or_ln25_fu_2504_p2;
wire   [15:0] tmp_8_fu_2515_p3;
wire   [15:0] add_ln1118_fu_2523_p2;
wire   [38:0] r_V_1_fu_2539_p2;
wire   [39:0] lhs_1_fu_2545_p3;
wire  signed [39:0] sext_ln703_fu_2553_p1;
wire   [39:0] ret_V_fu_2557_p2;
wire   [31:0] tmp_9_fu_2575_p4;
wire   [38:0] r_V_3_fu_2569_p2;
wire   [39:0] lhs_2_fu_2585_p3;
wire  signed [39:0] sext_ln703_1_fu_2593_p1;
wire   [39:0] ret_V_1_fu_2597_p2;
wire   [31:0] tmp_V_fu_2644_p2;
reg   [31:0] p_Result_11_fu_2658_p4;
reg   [31:0] l_fu_2668_p3;
wire   [31:0] sub_ln894_fu_2676_p2;
wire   [31:0] lsb_index_fu_2682_p2;
wire   [30:0] tmp_75_fu_2688_p4;
wire   [5:0] trunc_ln897_fu_2704_p1;
wire   [5:0] sub_ln897_fu_2708_p2;
wire   [31:0] zext_ln897_fu_2714_p1;
wire   [31:0] lshr_ln897_fu_2718_p2;
wire   [31:0] shl_ln899_fu_2724_p2;
wire   [31:0] or_ln899_2_fu_2730_p2;
wire   [31:0] and_ln899_fu_2736_p2;
wire   [0:0] tmp_76_fu_2748_p3;
wire   [0:0] icmp_ln896_fu_2698_p2;
wire   [0:0] icmp_ln899_fu_2742_p2;
wire   [0:0] p_Result_12_fu_2762_p3;
wire   [0:0] xor_ln899_fu_2756_p2;
wire   [0:0] select_ln896_fu_2776_p3;
wire   [0:0] and_ln899_1_fu_2790_p2;
wire   [63:0] zext_ln907_fu_2814_p1;
wire   [63:0] zext_ln908_fu_2817_p1;
wire   [63:0] zext_ln909_fu_2826_p1;
wire   [63:0] lshr_ln908_fu_2820_p2;
wire   [63:0] shl_ln909_fu_2829_p2;
wire   [63:0] m_2_fu_2835_p3;
wire   [63:0] zext_ln911_fu_2842_p1;
wire   [63:0] m_3_fu_2845_p2;
wire   [62:0] m_8_fu_2851_p4;
wire   [0:0] p_Result_s_fu_2865_p3;
wire   [10:0] sub_ln915_fu_2881_p2;
wire   [10:0] select_ln893_fu_2873_p3;
wire   [10:0] add_ln915_fu_2886_p2;
wire   [63:0] zext_ln912_fu_2861_p1;
wire   [11:0] tmp_1_fu_2892_p3;
wire   [63:0] p_Result_13_fu_2899_p5;
wire   [51:0] trunc_ln6_fu_2916_p4;
wire   [0:0] or_ln1506_fu_2938_p2;
wire   [0:0] grp_fu_2151_p2;
wire   [6:0] add_ln40_fu_2960_p2;
wire   [7:0] select_ln40_fu_2972_p3;
wire   [6:0] trunc_ln1118_fu_2997_p1;
wire   [12:0] tmp_10_cast_fu_3001_p3;
wire   [12:0] select_ln40_1_cast_fu_2988_p1;
wire   [12:0] add_ln1118_1_fu_3009_p2;
wire   [31:0] select_ln40_2_fu_3046_p3;
wire   [39:0] lhs_4_fu_3053_p3;
wire   [39:0] r_V_5_fu_3040_p2;
wire   [39:0] ret_V_2_fu_3061_p2;
wire   [31:0] tmp_V_2_fu_3112_p2;
reg   [31:0] p_Result_15_fu_3126_p4;
reg   [31:0] l_1_fu_3136_p3;
wire   [31:0] sub_ln894_1_fu_3144_p2;
wire   [31:0] lsb_index_1_fu_3150_p2;
wire   [30:0] tmp_79_fu_3156_p4;
wire   [5:0] trunc_ln897_1_fu_3172_p1;
wire   [5:0] sub_ln897_1_fu_3176_p2;
wire   [31:0] zext_ln897_1_fu_3182_p1;
wire   [31:0] lshr_ln897_1_fu_3186_p2;
wire   [31:0] shl_ln899_1_fu_3192_p2;
wire   [31:0] or_ln899_fu_3198_p2;
wire   [31:0] and_ln899_2_fu_3204_p2;
wire   [0:0] tmp_80_fu_3216_p3;
wire   [0:0] icmp_ln896_1_fu_3166_p2;
wire   [0:0] icmp_ln899_1_fu_3210_p2;
wire   [0:0] p_Result_16_fu_3230_p3;
wire   [0:0] xor_ln899_1_fu_3224_p2;
wire   [0:0] select_ln896_1_fu_3244_p3;
wire   [0:0] and_ln899_3_fu_3258_p2;
wire   [63:0] zext_ln907_1_fu_3282_p1;
wire   [63:0] zext_ln908_1_fu_3285_p1;
wire   [63:0] zext_ln909_1_fu_3294_p1;
wire   [63:0] lshr_ln908_1_fu_3288_p2;
wire   [63:0] shl_ln909_1_fu_3297_p2;
wire   [63:0] m_4_fu_3303_p3;
wire   [63:0] zext_ln911_1_fu_3310_p1;
wire   [63:0] m_5_fu_3313_p2;
wire   [62:0] m_fu_3319_p4;
wire   [0:0] p_Result_5_fu_3333_p3;
wire   [10:0] sub_ln915_1_fu_3349_p2;
wire   [10:0] select_ln893_1_fu_3341_p3;
wire   [10:0] add_ln915_1_fu_3354_p2;
wire   [63:0] zext_ln912_1_fu_3329_p1;
wire   [11:0] tmp_2_fu_3360_p3;
wire   [63:0] p_Result_17_fu_3367_p5;
wire   [51:0] trunc_ln1506_1_fu_3384_p4;
wire   [0:0] or_ln1506_1_fu_3406_p2;
wire  signed [31:0] mul_ln1118_fu_3636_p1;
wire  signed [31:0] mul_ln703_fu_3645_p1;
wire   [39:0] mul_ln1118_fu_3636_p2;
wire   [31:0] tmp_s_fu_3650_p4;
wire   [39:0] shl_ln_fu_3660_p3;
wire   [39:0] mul_ln703_fu_3645_p2;
wire  signed [31:0] mul_ln703_1_fu_3678_p1;
wire   [39:0] add_ln1192_fu_3668_p2;
wire   [31:0] tmp_4_fu_3683_p4;
wire   [39:0] shl_ln728_1_fu_3693_p3;
wire   [39:0] mul_ln703_1_fu_3678_p2;
wire  signed [31:0] mul_ln703_2_fu_3711_p1;
wire   [39:0] add_ln1192_1_fu_3701_p2;
wire  signed [31:0] mul_ln703_3_fu_3730_p1;
wire  signed [31:0] mul_ln703_4_fu_3739_p1;
wire   [39:0] shl_ln728_2_fu_3744_p3;
wire   [39:0] add_ln1192_2_fu_3751_p2;
wire   [31:0] tmp_12_fu_3756_p4;
wire   [39:0] shl_ln728_3_fu_3766_p3;
wire   [39:0] add_ln1192_3_fu_3774_p2;
wire   [31:0] tmp_13_fu_3779_p4;
wire   [39:0] shl_ln728_4_fu_3789_p3;
wire  signed [31:0] mul_ln1118_3_fu_3806_p1;
wire   [39:0] add_ln1192_4_fu_3797_p2;
wire   [31:0] tmp_14_fu_3811_p4;
wire   [38:0] mul_ln1118_3_fu_3806_p2;
wire   [39:0] shl_ln728_5_fu_3821_p3;
wire  signed [39:0] sext_ln703_2_fu_3829_p1;
wire  signed [31:0] mul_ln703_5_fu_3843_p1;
wire   [39:0] add_ln1192_5_fu_3833_p2;
wire   [31:0] tmp_15_fu_3848_p4;
wire   [39:0] shl_ln728_6_fu_3858_p3;
wire   [39:0] mul_ln703_5_fu_3843_p2;
wire  signed [31:0] mul_ln703_6_fu_3876_p1;
wire   [39:0] add_ln1192_6_fu_3866_p2;
wire  signed [31:0] mul_ln1118_4_fu_3895_p1;
wire  signed [31:0] mul_ln703_7_fu_3904_p1;
wire   [39:0] shl_ln728_7_fu_3909_p3;
wire   [39:0] add_ln1192_7_fu_3916_p2;
wire   [31:0] tmp_17_fu_3921_p4;
wire   [39:0] shl_ln728_8_fu_3931_p3;
wire  signed [39:0] sext_ln703_3_fu_3939_p1;
wire   [39:0] add_ln1192_8_fu_3942_p2;
wire   [31:0] tmp_18_fu_3948_p4;
wire   [39:0] shl_ln728_9_fu_3958_p3;
wire  signed [31:0] mul_ln1118_5_fu_3975_p1;
wire   [39:0] add_ln1192_9_fu_3966_p2;
wire   [31:0] tmp_19_fu_3980_p4;
wire   [38:0] mul_ln1118_5_fu_3975_p2;
wire   [39:0] shl_ln728_s_fu_3990_p3;
wire  signed [39:0] sext_ln703_4_fu_3998_p1;
wire  signed [31:0] mul_ln1118_6_fu_4012_p1;
wire   [39:0] add_ln1192_10_fu_4002_p2;
wire   [31:0] tmp_20_fu_4017_p4;
wire   [38:0] mul_ln1118_6_fu_4012_p2;
wire   [39:0] shl_ln728_10_fu_4027_p3;
wire  signed [39:0] sext_ln703_5_fu_4035_p1;
wire  signed [31:0] mul_ln703_8_fu_4049_p1;
wire   [39:0] add_ln1192_11_fu_4039_p2;
wire  signed [31:0] mul_ln703_9_fu_4068_p1;
wire  signed [31:0] mul_ln703_10_fu_4077_p1;
wire   [39:0] shl_ln728_11_fu_4082_p3;
wire   [39:0] add_ln1192_12_fu_4089_p2;
wire   [31:0] tmp_22_fu_4094_p4;
wire   [39:0] shl_ln728_12_fu_4104_p3;
wire   [39:0] add_ln1192_13_fu_4112_p2;
wire   [31:0] tmp_23_fu_4117_p4;
wire   [39:0] shl_ln728_13_fu_4127_p3;
wire  signed [31:0] mul_ln703_11_fu_4144_p1;
wire   [39:0] add_ln1192_14_fu_4135_p2;
wire   [31:0] tmp_24_fu_4149_p4;
wire   [39:0] shl_ln728_14_fu_4159_p3;
wire   [39:0] mul_ln703_11_fu_4144_p2;
wire  signed [31:0] mul_ln703_12_fu_4177_p1;
wire   [39:0] add_ln1192_15_fu_4167_p2;
wire   [31:0] tmp_25_fu_4182_p4;
wire   [39:0] shl_ln728_15_fu_4192_p3;
wire   [39:0] mul_ln703_12_fu_4177_p2;
wire  signed [31:0] mul_ln703_13_fu_4210_p1;
wire   [39:0] add_ln1192_16_fu_4200_p2;
wire  signed [31:0] mul_ln1118_7_fu_4229_p1;
wire  signed [31:0] mul_ln703_14_fu_4238_p1;
wire   [39:0] shl_ln728_16_fu_4243_p3;
wire   [39:0] add_ln1192_17_fu_4250_p2;
wire   [31:0] tmp_27_fu_4255_p4;
wire   [39:0] shl_ln728_17_fu_4265_p3;
wire  signed [39:0] sext_ln703_6_fu_4273_p1;
wire   [39:0] add_ln1192_18_fu_4276_p2;
wire   [31:0] tmp_28_fu_4282_p4;
wire   [39:0] shl_ln728_18_fu_4292_p3;
wire  signed [31:0] mul_ln1118_8_fu_4309_p1;
wire   [39:0] add_ln1192_19_fu_4300_p2;
wire   [31:0] tmp_29_fu_4314_p4;
wire   [38:0] mul_ln1118_8_fu_4309_p2;
wire   [39:0] shl_ln728_19_fu_4324_p3;
wire  signed [39:0] sext_ln703_7_fu_4332_p1;
wire  signed [31:0] mul_ln703_15_fu_4346_p1;
wire   [39:0] add_ln1192_20_fu_4336_p2;
wire   [31:0] tmp_30_fu_4351_p4;
wire   [39:0] shl_ln728_20_fu_4361_p3;
wire   [39:0] mul_ln703_15_fu_4346_p2;
wire  signed [31:0] mul_ln703_16_fu_4379_p1;
wire   [39:0] add_ln1192_21_fu_4369_p2;
wire  signed [31:0] mul_ln703_17_fu_4398_p1;
wire  signed [31:0] mul_ln703_18_fu_4407_p1;
wire   [39:0] shl_ln728_21_fu_4412_p3;
wire   [39:0] add_ln1192_22_fu_4419_p2;
wire   [31:0] tmp_32_fu_4424_p4;
wire   [39:0] shl_ln728_22_fu_4434_p3;
wire   [39:0] add_ln1192_23_fu_4442_p2;
wire   [31:0] tmp_33_fu_4447_p4;
wire   [39:0] shl_ln728_23_fu_4457_p3;
wire  signed [31:0] mul_ln703_19_fu_4474_p1;
wire   [39:0] add_ln1192_24_fu_4465_p2;
wire   [31:0] tmp_34_fu_4479_p4;
wire   [39:0] shl_ln728_24_fu_4489_p3;
wire   [39:0] mul_ln703_19_fu_4474_p2;
wire  signed [31:0] mul_ln1118_9_fu_4507_p1;
wire   [39:0] add_ln1192_25_fu_4497_p2;
wire   [31:0] tmp_35_fu_4512_p4;
wire   [38:0] mul_ln1118_9_fu_4507_p2;
wire   [39:0] shl_ln728_25_fu_4522_p3;
wire  signed [39:0] sext_ln703_8_fu_4530_p1;
wire  signed [31:0] mul_ln703_20_fu_4544_p1;
wire   [39:0] add_ln1192_26_fu_4534_p2;
wire  signed [31:0] mul_ln703_21_fu_4563_p1;
wire  signed [31:0] mul_ln703_22_fu_4572_p1;
wire   [39:0] shl_ln728_26_fu_4577_p3;
wire   [39:0] add_ln1192_27_fu_4584_p2;
wire   [31:0] tmp_37_fu_4589_p4;
wire   [39:0] shl_ln728_27_fu_4599_p3;
wire   [39:0] add_ln1192_28_fu_4607_p2;
wire   [31:0] tmp_38_fu_4612_p4;
wire   [39:0] shl_ln728_28_fu_4622_p3;
wire  signed [31:0] mul_ln1118_10_fu_4639_p1;
wire   [39:0] add_ln1192_29_fu_4630_p2;
wire   [31:0] tmp_39_fu_4644_p4;
wire   [38:0] mul_ln1118_10_fu_4639_p2;
wire   [39:0] shl_ln728_29_fu_4654_p3;
wire  signed [39:0] sext_ln703_9_fu_4662_p1;
wire  signed [31:0] mul_ln703_23_fu_4676_p1;
wire   [39:0] add_ln1192_30_fu_4666_p2;
wire   [31:0] tmp_40_fu_4681_p4;
wire   [39:0] shl_ln728_30_fu_4691_p3;
wire   [39:0] mul_ln703_23_fu_4676_p2;
wire  signed [31:0] mul_ln703_24_fu_4709_p1;
wire   [39:0] add_ln1192_31_fu_4699_p2;
wire  signed [31:0] mul_ln1118_11_fu_4728_p1;
wire  signed [31:0] mul_ln703_25_fu_4737_p1;
wire   [39:0] shl_ln728_31_fu_4742_p3;
wire   [39:0] add_ln1192_32_fu_4749_p2;
wire   [31:0] tmp_42_fu_4754_p4;
wire   [39:0] shl_ln728_32_fu_4764_p3;
wire  signed [39:0] sext_ln703_10_fu_4772_p1;
wire   [39:0] add_ln1192_33_fu_4775_p2;
wire   [31:0] tmp_43_fu_4781_p4;
wire   [39:0] shl_ln728_33_fu_4791_p3;
wire  signed [31:0] mul_ln703_26_fu_4808_p1;
wire   [39:0] add_ln1192_34_fu_4799_p2;
wire   [31:0] tmp_44_fu_4813_p4;
wire   [39:0] shl_ln728_34_fu_4823_p3;
wire   [39:0] mul_ln703_26_fu_4808_p2;
wire  signed [31:0] mul_ln1118_12_fu_4841_p1;
wire   [39:0] add_ln1192_35_fu_4831_p2;
wire   [31:0] tmp_45_fu_4846_p4;
wire   [38:0] mul_ln1118_12_fu_4841_p2;
wire   [39:0] shl_ln728_35_fu_4856_p3;
wire  signed [39:0] sext_ln703_11_fu_4864_p1;
wire  signed [31:0] mul_ln1118_13_fu_4878_p1;
wire   [39:0] add_ln1192_36_fu_4868_p2;
wire  signed [31:0] mul_ln703_27_fu_4897_p1;
wire  signed [31:0] mul_ln703_28_fu_4906_p1;
wire   [39:0] shl_ln728_36_fu_4911_p3;
wire  signed [39:0] sext_ln703_12_fu_4918_p1;
wire   [39:0] add_ln1192_37_fu_4921_p2;
wire   [31:0] tmp_47_fu_4927_p4;
wire   [39:0] shl_ln728_37_fu_4937_p3;
wire   [39:0] add_ln1192_38_fu_4945_p2;
wire   [31:0] tmp_48_fu_4950_p4;
wire   [39:0] shl_ln728_38_fu_4960_p3;
wire  signed [31:0] mul_ln703_29_fu_4977_p1;
wire   [39:0] add_ln1192_39_fu_4968_p2;
wire   [31:0] tmp_49_fu_4982_p4;
wire   [39:0] shl_ln728_39_fu_4992_p3;
wire   [39:0] mul_ln703_29_fu_4977_p2;
wire  signed [31:0] mul_ln1118_14_fu_5010_p1;
wire   [39:0] add_ln1192_40_fu_5000_p2;
wire   [31:0] tmp_50_fu_5015_p4;
wire   [38:0] mul_ln1118_14_fu_5010_p2;
wire   [39:0] shl_ln728_40_fu_5025_p3;
wire  signed [39:0] sext_ln703_13_fu_5033_p1;
wire  signed [31:0] mul_ln1118_15_fu_5047_p1;
wire   [39:0] add_ln1192_41_fu_5037_p2;
wire  signed [31:0] mul_ln1118_16_fu_5066_p1;
wire  signed [31:0] mul_ln1118_17_fu_5075_p1;
wire   [39:0] shl_ln728_41_fu_5080_p3;
wire  signed [39:0] sext_ln703_14_fu_5087_p1;
wire   [39:0] add_ln1192_42_fu_5090_p2;
wire   [31:0] tmp_52_fu_5096_p4;
wire   [39:0] shl_ln728_42_fu_5106_p3;
wire  signed [39:0] sext_ln703_15_fu_5114_p1;
wire   [39:0] add_ln1192_43_fu_5117_p2;
wire   [31:0] tmp_53_fu_5123_p4;
wire   [39:0] shl_ln728_43_fu_5133_p3;
wire  signed [39:0] sext_ln703_16_fu_5141_p1;
wire  signed [31:0] mul_ln703_30_fu_5154_p1;
wire   [39:0] add_ln1192_44_fu_5144_p2;
wire   [31:0] tmp_54_fu_5159_p4;
wire   [39:0] shl_ln728_44_fu_5169_p3;
wire   [39:0] mul_ln703_30_fu_5154_p2;
wire  signed [31:0] mul_ln703_31_fu_5187_p1;
wire   [39:0] add_ln1192_45_fu_5177_p2;
wire   [31:0] tmp_55_fu_5192_p4;
wire   [39:0] shl_ln728_45_fu_5202_p3;
wire   [39:0] mul_ln703_31_fu_5187_p2;
wire  signed [31:0] mul_ln703_32_fu_5220_p1;
wire   [39:0] add_ln1192_46_fu_5210_p2;
wire  signed [31:0] mul_ln703_33_fu_5239_p1;
wire  signed [31:0] mul_ln703_34_fu_5248_p1;
wire   [39:0] shl_ln728_46_fu_5253_p3;
wire   [39:0] add_ln1192_47_fu_5260_p2;
wire   [31:0] tmp_57_fu_5265_p4;
wire   [39:0] shl_ln728_47_fu_5275_p3;
wire   [39:0] add_ln1192_48_fu_5283_p2;
wire   [31:0] tmp_58_fu_5288_p4;
wire   [39:0] shl_ln728_48_fu_5298_p3;
wire  signed [31:0] mul_ln703_35_fu_5315_p1;
wire   [39:0] add_ln1192_49_fu_5306_p2;
wire   [31:0] tmp_59_fu_5320_p4;
wire   [39:0] shl_ln728_49_fu_5330_p3;
wire   [39:0] mul_ln703_35_fu_5315_p2;
wire  signed [31:0] mul_ln703_36_fu_5348_p1;
wire   [39:0] add_ln1192_50_fu_5338_p2;
wire   [31:0] tmp_60_fu_5353_p4;
wire   [39:0] shl_ln728_50_fu_5363_p3;
wire   [39:0] mul_ln703_36_fu_5348_p2;
wire  signed [31:0] mul_ln1118_18_fu_5381_p1;
wire   [39:0] add_ln1192_51_fu_5371_p2;
wire  signed [31:0] mul_ln703_37_fu_5400_p1;
wire  signed [31:0] mul_ln703_38_fu_5409_p1;
wire   [39:0] shl_ln728_51_fu_5414_p3;
wire  signed [39:0] sext_ln703_17_fu_5421_p1;
wire   [39:0] add_ln1192_52_fu_5424_p2;
wire   [31:0] tmp_62_fu_5430_p4;
wire   [39:0] shl_ln728_52_fu_5440_p3;
wire   [39:0] add_ln1192_53_fu_5448_p2;
wire   [31:0] tmp_63_fu_5453_p4;
wire   [39:0] shl_ln728_53_fu_5463_p3;
wire  signed [31:0] mul_ln1118_19_fu_5480_p1;
wire   [39:0] add_ln1192_54_fu_5471_p2;
wire   [31:0] tmp_64_fu_5485_p4;
wire   [38:0] mul_ln1118_19_fu_5480_p2;
wire   [39:0] shl_ln728_54_fu_5495_p3;
wire  signed [39:0] sext_ln703_18_fu_5503_p1;
wire  signed [31:0] mul_ln703_39_fu_5517_p1;
wire   [39:0] add_ln1192_55_fu_5507_p2;
wire   [31:0] tmp_65_fu_5522_p4;
wire   [39:0] shl_ln728_55_fu_5532_p3;
wire   [39:0] mul_ln703_39_fu_5517_p2;
wire  signed [31:0] mul_ln703_40_fu_5550_p1;
wire   [39:0] add_ln1192_56_fu_5540_p2;
wire  signed [31:0] mul_ln703_41_fu_5569_p1;
wire   [39:0] shl_ln728_56_fu_5574_p3;
wire   [39:0] add_ln1192_57_fu_5581_p2;
wire   [31:0] tmp_67_fu_5586_p4;
wire   [39:0] shl_ln728_57_fu_5596_p3;
wire  signed [31:0] mul_ln703_42_fu_5613_p1;
wire   [39:0] add_ln1192_58_fu_5604_p2;
wire   [31:0] tmp_68_fu_5618_p4;
wire   [39:0] shl_ln728_58_fu_5628_p3;
wire   [39:0] mul_ln703_42_fu_5613_p2;
wire  signed [31:0] mul_ln703_43_fu_5646_p1;
wire   [39:0] add_ln1192_59_fu_5636_p2;
wire   [31:0] tmp_69_fu_5651_p4;
wire   [39:0] shl_ln728_59_fu_5661_p3;
wire   [39:0] mul_ln703_43_fu_5646_p2;
wire   [39:0] add_ln1192_60_fu_5669_p2;
wire  signed [31:0] mul_ln1118_20_fu_5688_p1;
wire   [38:0] mul_ln1118_20_fu_5688_p2;
wire   [39:0] shl_ln728_60_fu_5693_p3;
wire  signed [39:0] sext_ln703_19_fu_5700_p1;
wire  signed [31:0] mul_ln703_44_fu_5714_p1;
wire   [39:0] add_ln1192_61_fu_5704_p2;
wire   [31:0] tmp_71_fu_5719_p4;
wire   [39:0] shl_ln728_61_fu_5729_p3;
wire   [39:0] mul_ln703_44_fu_5714_p2;
wire   [39:0] add_ln1192_62_fu_5737_p2;
wire   [0:0] icmp_ln1494_fu_5771_p2;
wire   [10:0] shl_ln1_fu_5785_p3;
wire   [31:0] zext_ln111_fu_5793_p1;
wire    ap_CS_fsm_state76;
wire   [7:0] trunc_ln851_fu_5823_p1;
wire   [23:0] ret_V_3_fu_5805_p4;
wire   [0:0] icmp_ln851_fu_5827_p2;
wire   [23:0] ret_V_4_fu_5833_p2;
wire   [0:0] p_Result_7_fu_5815_p3;
wire   [23:0] select_ln850_fu_5839_p3;
wire   [23:0] ret_V_6_fu_5847_p3;
wire    ap_block_pp2_stage0_00001;
wire    ap_block_pp4_stage0_00001;
reg   [47:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
reg    ap_idle_pp6;
wire    ap_enable_pp6;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 48'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter3 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter3 = 1'b0;
#0 ap_enable_reg_pp5_iter4 = 1'b0;
#0 ap_enable_reg_pp5_iter5 = 1'b0;
#0 ap_enable_reg_pp5_iter6 = 1'b0;
#0 ap_enable_reg_pp5_iter7 = 1'b0;
#0 ap_enable_reg_pp5_iter8 = 1'b0;
#0 ap_enable_reg_pp5_iter9 = 1'b0;
#0 ap_enable_reg_pp5_iter10 = 1'b0;
#0 ap_enable_reg_pp5_iter11 = 1'b0;
#0 ap_enable_reg_pp5_iter12 = 1'b0;
#0 ap_enable_reg_pp5_iter13 = 1'b0;
#0 ap_enable_reg_pp5_iter14 = 1'b0;
end

nn_inference_weights_layer1_weights_V #(
    .DataWidth( 7 ),
    .AddressRange( 51200 ),
    .AddressWidth( 16 ))
weights_layer1_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_layer1_weights_V_address0),
    .ce0(weights_layer1_weights_V_ce0),
    .q0(weights_layer1_weights_V_q0),
    .address1(weights_layer1_weights_V_address1),
    .ce1(weights_layer1_weights_V_ce1),
    .q1(weights_layer1_weights_V_q1)
);

nn_inference_weights_layer2_weights_V #(
    .DataWidth( 8 ),
    .AddressRange( 8192 ),
    .AddressWidth( 13 ))
weights_layer2_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_layer2_weights_V_address0),
    .ce0(weights_layer2_weights_V_ce0),
    .q0(weights_layer2_weights_V_q0)
);

nn_inference_layer3_weights_V_0 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_0_address0),
    .ce0(layer3_weights_V_0_ce0),
    .q0(layer3_weights_V_0_q0)
);

nn_inference_layer3_weights_V_1 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_1_address0),
    .ce0(layer3_weights_V_1_ce0),
    .q0(layer3_weights_V_1_q0)
);

nn_inference_layer3_weights_V_2 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_2_address0),
    .ce0(layer3_weights_V_2_ce0),
    .q0(layer3_weights_V_2_q0)
);

nn_inference_layer3_weights_V_3 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_3_address0),
    .ce0(layer3_weights_V_3_ce0),
    .q0(layer3_weights_V_3_q0)
);

nn_inference_layer3_weights_V_4 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_4_address0),
    .ce0(layer3_weights_V_4_ce0),
    .q0(layer3_weights_V_4_q0)
);

nn_inference_layer3_weights_V_5 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_5_address0),
    .ce0(layer3_weights_V_5_ce0),
    .q0(layer3_weights_V_5_q0)
);

nn_inference_layer3_weights_V_6 #(
    .DataWidth( 7 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_6_address0),
    .ce0(layer3_weights_V_6_ce0),
    .q0(layer3_weights_V_6_q0)
);

nn_inference_layer3_weights_V_7 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_7_address0),
    .ce0(layer3_weights_V_7_ce0),
    .q0(layer3_weights_V_7_q0)
);

nn_inference_layer3_weights_V_8 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_8_address0),
    .ce0(layer3_weights_V_8_ce0),
    .q0(layer3_weights_V_8_q0)
);

nn_inference_layer3_weights_V_9 #(
    .DataWidth( 7 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_9_address0),
    .ce0(layer3_weights_V_9_ce0),
    .q0(layer3_weights_V_9_q0)
);

nn_inference_layer3_weights_V_10 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_10_address0),
    .ce0(layer3_weights_V_10_ce0),
    .q0(layer3_weights_V_10_q0)
);

nn_inference_layer3_weights_V_11 #(
    .DataWidth( 7 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_11_address0),
    .ce0(layer3_weights_V_11_ce0),
    .q0(layer3_weights_V_11_q0)
);

nn_inference_layer3_weights_V_12 #(
    .DataWidth( 7 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_12_address0),
    .ce0(layer3_weights_V_12_ce0),
    .q0(layer3_weights_V_12_q0)
);

nn_inference_layer3_weights_V_13 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_13_address0),
    .ce0(layer3_weights_V_13_ce0),
    .q0(layer3_weights_V_13_q0)
);

nn_inference_layer3_weights_V_14 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_14_address0),
    .ce0(layer3_weights_V_14_ce0),
    .q0(layer3_weights_V_14_q0)
);

nn_inference_layer3_weights_V_15 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_15_address0),
    .ce0(layer3_weights_V_15_ce0),
    .q0(layer3_weights_V_15_q0)
);

nn_inference_layer3_weights_V_16 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_16_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_16_address0),
    .ce0(layer3_weights_V_16_ce0),
    .q0(layer3_weights_V_16_q0)
);

nn_inference_layer3_weights_V_17 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_17_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_17_address0),
    .ce0(layer3_weights_V_17_ce0),
    .q0(layer3_weights_V_17_q0)
);

nn_inference_layer3_weights_V_18 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_18_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_18_address0),
    .ce0(layer3_weights_V_18_ce0),
    .q0(layer3_weights_V_18_q0)
);

nn_inference_layer3_weights_V_19 #(
    .DataWidth( 7 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_19_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_19_address0),
    .ce0(layer3_weights_V_19_ce0),
    .q0(layer3_weights_V_19_q0)
);

nn_inference_layer3_weights_V_20 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_20_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_20_address0),
    .ce0(layer3_weights_V_20_ce0),
    .q0(layer3_weights_V_20_q0)
);

nn_inference_layer3_weights_V_21 #(
    .DataWidth( 7 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_21_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_21_address0),
    .ce0(layer3_weights_V_21_ce0),
    .q0(layer3_weights_V_21_q0)
);

nn_inference_layer3_weights_V_22 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_22_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_22_address0),
    .ce0(layer3_weights_V_22_ce0),
    .q0(layer3_weights_V_22_q0)
);

nn_inference_layer3_weights_V_23 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_23_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_23_address0),
    .ce0(layer3_weights_V_23_ce0),
    .q0(layer3_weights_V_23_q0)
);

nn_inference_layer3_weights_V_24 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_24_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_24_address0),
    .ce0(layer3_weights_V_24_ce0),
    .q0(layer3_weights_V_24_q0)
);

nn_inference_layer3_weights_V_25 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_25_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_25_address0),
    .ce0(layer3_weights_V_25_ce0),
    .q0(layer3_weights_V_25_q0)
);

nn_inference_layer3_weights_V_26 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_26_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_26_address0),
    .ce0(layer3_weights_V_26_ce0),
    .q0(layer3_weights_V_26_q0)
);

nn_inference_layer3_weights_V_27 #(
    .DataWidth( 7 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_27_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_27_address0),
    .ce0(layer3_weights_V_27_ce0),
    .q0(layer3_weights_V_27_q0)
);

nn_inference_layer3_weights_V_28 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_28_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_28_address0),
    .ce0(layer3_weights_V_28_ce0),
    .q0(layer3_weights_V_28_q0)
);

nn_inference_layer3_weights_V_29 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_29_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_29_address0),
    .ce0(layer3_weights_V_29_ce0),
    .q0(layer3_weights_V_29_q0)
);

nn_inference_layer3_weights_V_30 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_30_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_30_address0),
    .ce0(layer3_weights_V_30_ce0),
    .q0(layer3_weights_V_30_q0)
);

nn_inference_layer3_weights_V_31 #(
    .DataWidth( 7 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_31_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_31_address0),
    .ce0(layer3_weights_V_31_ce0),
    .q0(layer3_weights_V_31_q0)
);

nn_inference_layer3_weights_V_32 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_32_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_32_address0),
    .ce0(layer3_weights_V_32_ce0),
    .q0(layer3_weights_V_32_q0)
);

nn_inference_layer3_weights_V_33 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_33_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_33_address0),
    .ce0(layer3_weights_V_33_ce0),
    .q0(layer3_weights_V_33_q0)
);

nn_inference_layer3_weights_V_34 #(
    .DataWidth( 7 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_34_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_34_address0),
    .ce0(layer3_weights_V_34_ce0),
    .q0(layer3_weights_V_34_q0)
);

nn_inference_layer3_weights_V_35 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_35_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_35_address0),
    .ce0(layer3_weights_V_35_ce0),
    .q0(layer3_weights_V_35_q0)
);

nn_inference_layer3_weights_V_36 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_36_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_36_address0),
    .ce0(layer3_weights_V_36_ce0),
    .q0(layer3_weights_V_36_q0)
);

nn_inference_layer3_weights_V_37 #(
    .DataWidth( 7 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_37_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_37_address0),
    .ce0(layer3_weights_V_37_ce0),
    .q0(layer3_weights_V_37_q0)
);

nn_inference_layer3_weights_V_38 #(
    .DataWidth( 7 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_38_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_38_address0),
    .ce0(layer3_weights_V_38_ce0),
    .q0(layer3_weights_V_38_q0)
);

nn_inference_layer3_weights_V_39 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_39_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_39_address0),
    .ce0(layer3_weights_V_39_ce0),
    .q0(layer3_weights_V_39_q0)
);

nn_inference_layer3_weights_V_40 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_40_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_40_address0),
    .ce0(layer3_weights_V_40_ce0),
    .q0(layer3_weights_V_40_q0)
);

nn_inference_layer3_weights_V_41 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_41_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_41_address0),
    .ce0(layer3_weights_V_41_ce0),
    .q0(layer3_weights_V_41_q0)
);

nn_inference_layer3_weights_V_42 #(
    .DataWidth( 7 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_42_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_42_address0),
    .ce0(layer3_weights_V_42_ce0),
    .q0(layer3_weights_V_42_q0)
);

nn_inference_layer3_weights_V_43 #(
    .DataWidth( 7 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_43_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_43_address0),
    .ce0(layer3_weights_V_43_ce0),
    .q0(layer3_weights_V_43_q0)
);

nn_inference_layer3_weights_V_44 #(
    .DataWidth( 7 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_44_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_44_address0),
    .ce0(layer3_weights_V_44_ce0),
    .q0(layer3_weights_V_44_q0)
);

nn_inference_layer3_weights_V_45 #(
    .DataWidth( 7 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_45_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_45_address0),
    .ce0(layer3_weights_V_45_ce0),
    .q0(layer3_weights_V_45_q0)
);

nn_inference_layer3_weights_V_46 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_46_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_46_address0),
    .ce0(layer3_weights_V_46_ce0),
    .q0(layer3_weights_V_46_q0)
);

nn_inference_layer3_weights_V_47 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_47_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_47_address0),
    .ce0(layer3_weights_V_47_ce0),
    .q0(layer3_weights_V_47_q0)
);

nn_inference_layer3_weights_V_48 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_48_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_48_address0),
    .ce0(layer3_weights_V_48_ce0),
    .q0(layer3_weights_V_48_q0)
);

nn_inference_layer3_weights_V_49 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_49_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_49_address0),
    .ce0(layer3_weights_V_49_ce0),
    .q0(layer3_weights_V_49_q0)
);

nn_inference_layer3_weights_V_50 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_50_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_50_address0),
    .ce0(layer3_weights_V_50_ce0),
    .q0(layer3_weights_V_50_q0)
);

nn_inference_layer3_weights_V_51 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_51_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_51_address0),
    .ce0(layer3_weights_V_51_ce0),
    .q0(layer3_weights_V_51_q0)
);

nn_inference_layer3_weights_V_52 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_52_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_52_address0),
    .ce0(layer3_weights_V_52_ce0),
    .q0(layer3_weights_V_52_q0)
);

nn_inference_layer3_weights_V_53 #(
    .DataWidth( 7 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_53_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_53_address0),
    .ce0(layer3_weights_V_53_ce0),
    .q0(layer3_weights_V_53_q0)
);

nn_inference_layer3_weights_V_54 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_54_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_54_address0),
    .ce0(layer3_weights_V_54_ce0),
    .q0(layer3_weights_V_54_q0)
);

nn_inference_layer3_weights_V_55 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_55_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_55_address0),
    .ce0(layer3_weights_V_55_ce0),
    .q0(layer3_weights_V_55_q0)
);

nn_inference_layer3_weights_V_56 #(
    .DataWidth( 7 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_56_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_56_address0),
    .ce0(layer3_weights_V_56_ce0),
    .q0(layer3_weights_V_56_q0)
);

nn_inference_layer3_weights_V_57 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_57_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_57_address0),
    .ce0(layer3_weights_V_57_ce0),
    .q0(layer3_weights_V_57_q0)
);

nn_inference_layer3_weights_V_58 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_58_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_58_address0),
    .ce0(layer3_weights_V_58_ce0),
    .q0(layer3_weights_V_58_q0)
);

nn_inference_layer3_weights_V_59 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_59_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_59_address0),
    .ce0(layer3_weights_V_59_ce0),
    .q0(layer3_weights_V_59_q0)
);

nn_inference_layer3_weights_V_60 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_60_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_60_address0),
    .ce0(layer3_weights_V_60_ce0),
    .q0(layer3_weights_V_60_q0)
);

nn_inference_layer3_weights_V_61 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_61_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_61_address0),
    .ce0(layer3_weights_V_61_ce0),
    .q0(layer3_weights_V_61_q0)
);

nn_inference_layer3_weights_V_62 #(
    .DataWidth( 7 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_62_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_62_address0),
    .ce0(layer3_weights_V_62_ce0),
    .q0(layer3_weights_V_62_q0)
);

nn_inference_layer3_weights_V_63 #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer3_weights_V_63_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer3_weights_V_63_address0),
    .ce0(layer3_weights_V_63_ce0),
    .q0(layer3_weights_V_63_q0)
);

nn_inference_fp_input_img_V #(
    .DataWidth( 32 ),
    .AddressRange( 400 ),
    .AddressWidth( 9 ))
fp_input_img_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fp_input_img_V_address0),
    .ce0(fp_input_img_V_ce0),
    .we0(fp_input_img_V_we0),
    .d0(fp_input_img_V_d0),
    .q0(fp_input_img_V_q0),
    .address1(fp_input_img_V_address1),
    .ce1(fp_input_img_V_ce1),
    .q1(fp_input_img_V_q1)
);

nn_inference_temp_output_0_V #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
temp_output_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_output_0_V_address0),
    .ce0(temp_output_0_V_ce0),
    .we0(temp_output_0_V_we0),
    .d0(temp_output_0_V_d0),
    .address1(temp_output_0_V_address1),
    .ce1(temp_output_0_V_ce1),
    .q1(temp_output_0_V_q1)
);

nn_inference_temp_output2_0_V #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
temp_output2_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_output2_0_V_address0),
    .ce0(temp_output2_0_V_ce0),
    .we0(temp_output2_0_V_we0),
    .d0(temp_output2_0_V_d0),
    .q0(temp_output2_0_V_q0),
    .address1(temp_output2_0_V_address1),
    .ce1(temp_output2_0_V_ce1),
    .q1(temp_output2_0_V_q1)
);

nn_inference_temp_output3_0_V #(
    .DataWidth( 32 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
temp_output3_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_output3_0_V_address0),
    .ce0(temp_output3_0_V_ce0),
    .we0(temp_output3_0_V_we0),
    .d0(temp_output3_0_V_d0),
    .q0(temp_output3_0_V_q0)
);

nn_inference_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2148_p0),
    .ce(1'b1),
    .dout(grp_fu_2148_p1)
);

nn_inference_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2151_p0),
    .din1(64'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_2151_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U3(
    .din0(weights_layer1_weights_V_load_reg_5972),
    .din1(r_V_reg_5967),
    .dout(r_V_1_fu_2539_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U4(
    .din0(weights_layer1_weights_V_load_1_reg_5982),
    .din1(r_V_2_reg_5977),
    .dout(r_V_3_fu_2569_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U5(
    .din0(weights_layer2_weights_V_q0),
    .din1(temp_output_0_V_q1),
    .dout(r_V_5_fu_3040_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U6(
    .din0(layer3_weights_V_0_q0),
    .din1(mul_ln1118_fu_3636_p1),
    .dout(mul_ln1118_fu_3636_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U7(
    .din0(layer3_weights_V_1_q0),
    .din1(mul_ln703_fu_3645_p1),
    .dout(mul_ln703_fu_3645_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U8(
    .din0(layer3_weights_V_2_q0),
    .din1(mul_ln703_1_fu_3678_p1),
    .dout(mul_ln703_1_fu_3678_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U9(
    .din0(layer3_weights_V_3_q0),
    .din1(mul_ln703_2_fu_3711_p1),
    .dout(mul_ln703_2_fu_3711_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U10(
    .din0(layer3_weights_V_4_q0),
    .din1(mul_ln703_3_fu_3730_p1),
    .dout(mul_ln703_3_fu_3730_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U11(
    .din0(layer3_weights_V_5_q0),
    .din1(mul_ln703_4_fu_3739_p1),
    .dout(mul_ln703_4_fu_3739_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U12(
    .din0(layer3_weights_V_6_q0),
    .din1(mul_ln1118_3_fu_3806_p1),
    .dout(mul_ln1118_3_fu_3806_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U13(
    .din0(layer3_weights_V_7_q0),
    .din1(mul_ln703_5_fu_3843_p1),
    .dout(mul_ln703_5_fu_3843_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U14(
    .din0(layer3_weights_V_8_q0),
    .din1(mul_ln703_6_fu_3876_p1),
    .dout(mul_ln703_6_fu_3876_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U15(
    .din0(layer3_weights_V_9_q0),
    .din1(mul_ln1118_4_fu_3895_p1),
    .dout(mul_ln1118_4_fu_3895_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U16(
    .din0(layer3_weights_V_10_q0),
    .din1(mul_ln703_7_fu_3904_p1),
    .dout(mul_ln703_7_fu_3904_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U17(
    .din0(layer3_weights_V_11_q0),
    .din1(mul_ln1118_5_fu_3975_p1),
    .dout(mul_ln1118_5_fu_3975_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U18(
    .din0(layer3_weights_V_12_q0),
    .din1(mul_ln1118_6_fu_4012_p1),
    .dout(mul_ln1118_6_fu_4012_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U19(
    .din0(layer3_weights_V_13_q0),
    .din1(mul_ln703_8_fu_4049_p1),
    .dout(mul_ln703_8_fu_4049_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U20(
    .din0(layer3_weights_V_14_q0),
    .din1(mul_ln703_9_fu_4068_p1),
    .dout(mul_ln703_9_fu_4068_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U21(
    .din0(layer3_weights_V_15_q0),
    .din1(mul_ln703_10_fu_4077_p1),
    .dout(mul_ln703_10_fu_4077_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U22(
    .din0(layer3_weights_V_16_q0),
    .din1(mul_ln703_11_fu_4144_p1),
    .dout(mul_ln703_11_fu_4144_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U23(
    .din0(layer3_weights_V_17_q0),
    .din1(mul_ln703_12_fu_4177_p1),
    .dout(mul_ln703_12_fu_4177_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U24(
    .din0(layer3_weights_V_18_q0),
    .din1(mul_ln703_13_fu_4210_p1),
    .dout(mul_ln703_13_fu_4210_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U25(
    .din0(layer3_weights_V_19_q0),
    .din1(mul_ln1118_7_fu_4229_p1),
    .dout(mul_ln1118_7_fu_4229_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U26(
    .din0(layer3_weights_V_20_q0),
    .din1(mul_ln703_14_fu_4238_p1),
    .dout(mul_ln703_14_fu_4238_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U27(
    .din0(layer3_weights_V_21_q0),
    .din1(mul_ln1118_8_fu_4309_p1),
    .dout(mul_ln1118_8_fu_4309_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U28(
    .din0(layer3_weights_V_22_q0),
    .din1(mul_ln703_15_fu_4346_p1),
    .dout(mul_ln703_15_fu_4346_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U29(
    .din0(layer3_weights_V_23_q0),
    .din1(mul_ln703_16_fu_4379_p1),
    .dout(mul_ln703_16_fu_4379_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U30(
    .din0(layer3_weights_V_24_q0),
    .din1(mul_ln703_17_fu_4398_p1),
    .dout(mul_ln703_17_fu_4398_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U31(
    .din0(layer3_weights_V_25_q0),
    .din1(mul_ln703_18_fu_4407_p1),
    .dout(mul_ln703_18_fu_4407_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U32(
    .din0(layer3_weights_V_26_q0),
    .din1(mul_ln703_19_fu_4474_p1),
    .dout(mul_ln703_19_fu_4474_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U33(
    .din0(layer3_weights_V_27_q0),
    .din1(mul_ln1118_9_fu_4507_p1),
    .dout(mul_ln1118_9_fu_4507_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U34(
    .din0(layer3_weights_V_28_q0),
    .din1(mul_ln703_20_fu_4544_p1),
    .dout(mul_ln703_20_fu_4544_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U35(
    .din0(layer3_weights_V_29_q0),
    .din1(mul_ln703_21_fu_4563_p1),
    .dout(mul_ln703_21_fu_4563_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U36(
    .din0(layer3_weights_V_30_q0),
    .din1(mul_ln703_22_fu_4572_p1),
    .dout(mul_ln703_22_fu_4572_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U37(
    .din0(layer3_weights_V_31_q0),
    .din1(mul_ln1118_10_fu_4639_p1),
    .dout(mul_ln1118_10_fu_4639_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U38(
    .din0(layer3_weights_V_32_q0),
    .din1(mul_ln703_23_fu_4676_p1),
    .dout(mul_ln703_23_fu_4676_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U39(
    .din0(layer3_weights_V_33_q0),
    .din1(mul_ln703_24_fu_4709_p1),
    .dout(mul_ln703_24_fu_4709_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U40(
    .din0(layer3_weights_V_34_q0),
    .din1(mul_ln1118_11_fu_4728_p1),
    .dout(mul_ln1118_11_fu_4728_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U41(
    .din0(layer3_weights_V_35_q0),
    .din1(mul_ln703_25_fu_4737_p1),
    .dout(mul_ln703_25_fu_4737_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U42(
    .din0(layer3_weights_V_36_q0),
    .din1(mul_ln703_26_fu_4808_p1),
    .dout(mul_ln703_26_fu_4808_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U43(
    .din0(layer3_weights_V_37_q0),
    .din1(mul_ln1118_12_fu_4841_p1),
    .dout(mul_ln1118_12_fu_4841_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U44(
    .din0(layer3_weights_V_38_q0),
    .din1(mul_ln1118_13_fu_4878_p1),
    .dout(mul_ln1118_13_fu_4878_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U45(
    .din0(layer3_weights_V_39_q0),
    .din1(mul_ln703_27_fu_4897_p1),
    .dout(mul_ln703_27_fu_4897_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U46(
    .din0(layer3_weights_V_40_q0),
    .din1(mul_ln703_28_fu_4906_p1),
    .dout(mul_ln703_28_fu_4906_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U47(
    .din0(layer3_weights_V_41_q0),
    .din1(mul_ln703_29_fu_4977_p1),
    .dout(mul_ln703_29_fu_4977_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U48(
    .din0(layer3_weights_V_42_q0),
    .din1(mul_ln1118_14_fu_5010_p1),
    .dout(mul_ln1118_14_fu_5010_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U49(
    .din0(layer3_weights_V_43_q0),
    .din1(mul_ln1118_15_fu_5047_p1),
    .dout(mul_ln1118_15_fu_5047_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U50(
    .din0(layer3_weights_V_44_q0),
    .din1(mul_ln1118_16_fu_5066_p1),
    .dout(mul_ln1118_16_fu_5066_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U51(
    .din0(layer3_weights_V_45_q0),
    .din1(mul_ln1118_17_fu_5075_p1),
    .dout(mul_ln1118_17_fu_5075_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U52(
    .din0(layer3_weights_V_46_q0),
    .din1(mul_ln703_30_fu_5154_p1),
    .dout(mul_ln703_30_fu_5154_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U53(
    .din0(layer3_weights_V_47_q0),
    .din1(mul_ln703_31_fu_5187_p1),
    .dout(mul_ln703_31_fu_5187_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U54(
    .din0(layer3_weights_V_48_q0),
    .din1(mul_ln703_32_fu_5220_p1),
    .dout(mul_ln703_32_fu_5220_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U55(
    .din0(layer3_weights_V_49_q0),
    .din1(mul_ln703_33_fu_5239_p1),
    .dout(mul_ln703_33_fu_5239_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U56(
    .din0(layer3_weights_V_50_q0),
    .din1(mul_ln703_34_fu_5248_p1),
    .dout(mul_ln703_34_fu_5248_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U57(
    .din0(layer3_weights_V_51_q0),
    .din1(mul_ln703_35_fu_5315_p1),
    .dout(mul_ln703_35_fu_5315_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U58(
    .din0(layer3_weights_V_52_q0),
    .din1(mul_ln703_36_fu_5348_p1),
    .dout(mul_ln703_36_fu_5348_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U59(
    .din0(layer3_weights_V_53_q0),
    .din1(mul_ln1118_18_fu_5381_p1),
    .dout(mul_ln1118_18_fu_5381_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U60(
    .din0(layer3_weights_V_54_q0),
    .din1(mul_ln703_37_fu_5400_p1),
    .dout(mul_ln703_37_fu_5400_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U61(
    .din0(layer3_weights_V_55_q0),
    .din1(mul_ln703_38_fu_5409_p1),
    .dout(mul_ln703_38_fu_5409_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U62(
    .din0(layer3_weights_V_56_q0),
    .din1(mul_ln1118_19_fu_5480_p1),
    .dout(mul_ln1118_19_fu_5480_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U63(
    .din0(layer3_weights_V_57_q0),
    .din1(mul_ln703_39_fu_5517_p1),
    .dout(mul_ln703_39_fu_5517_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U64(
    .din0(layer3_weights_V_58_q0),
    .din1(mul_ln703_40_fu_5550_p1),
    .dout(mul_ln703_40_fu_5550_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U65(
    .din0(layer3_weights_V_59_q0),
    .din1(mul_ln703_41_fu_5569_p1),
    .dout(mul_ln703_41_fu_5569_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U66(
    .din0(layer3_weights_V_60_q0),
    .din1(mul_ln703_42_fu_5613_p1),
    .dout(mul_ln703_42_fu_5613_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U67(
    .din0(layer3_weights_V_61_q0),
    .din1(mul_ln703_43_fu_5646_p1),
    .dout(mul_ln703_43_fu_5646_p2)
);

nn_inference_mul_7s_32s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 39 ))
mul_7s_32s_39_1_1_U68(
    .din0(layer3_weights_V_62_load_reg_7748),
    .din1(mul_ln1118_20_fu_5688_p1),
    .dout(mul_ln1118_20_fu_5688_p2)
);

nn_inference_mul_8s_32s_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 40 ))
mul_8s_32s_40_1_1_U69(
    .din0(layer3_weights_V_63_q0),
    .din1(mul_ln703_44_fu_5714_p1),
    .dout(mul_ln703_44_fu_5714_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln21_fu_2450_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((((icmp_ln21_fu_2450_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((ap_enable_reg_pp1_iter0 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter1_state9)))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter1_state9))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((icmp_ln21_fu_2450_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state12))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((icmp_ln21_fu_2450_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state12)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state12);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end else if (((icmp_ln21_fu_2450_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp2_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_condition_pp3_exit_iter0_state17))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state17)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state17);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_condition_pp4_exit_iter0_state21))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state21)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state21);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp4_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_condition_pp5_exit_iter0_state58) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state57)) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state58)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state58);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter10 <= ap_enable_reg_pp5_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter11 <= ap_enable_reg_pp5_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter12 <= ap_enable_reg_pp5_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter13 <= ap_enable_reg_pp5_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter14 <= ap_enable_reg_pp5_iter13;
        end else if ((1'b1 == ap_CS_fsm_state57)) begin
            ap_enable_reg_pp5_iter14 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter3 <= ap_enable_reg_pp5_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter4 <= ap_enable_reg_pp5_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter5 <= ap_enable_reg_pp5_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter6 <= ap_enable_reg_pp5_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter7 <= ap_enable_reg_pp5_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter8 <= ap_enable_reg_pp5_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter9 <= ap_enable_reg_pp5_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp6_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp6_flush_enable)) begin
            ap_enable_reg_pp6_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state73)) begin
            ap_enable_reg_pp6_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp6_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
        end else if ((1'b1 == ap_CS_fsm_state73)) begin
            ap_enable_reg_pp6_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_2450_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_1_reg_2035 <= 8'd0;
    end else if (((icmp_ln77_fu_2619_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_1_reg_2035 <= add_ln77_fu_2613_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i_2_reg_2091 <= 7'd0;
    end else if (((icmp_ln92_fu_3087_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        i_2_reg_2091 <= add_ln92_fu_3081_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        i_3_reg_2113 <= 3'd0;
    end else if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (icmp_ln109_reg_7768 == 1'd0))) begin
        i_3_reg_2113 <= add_ln109_reg_7763;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_1988 <= 9'd0;
    end else if (((icmp_ln5_fu_2162_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_1988 <= add_ln5_fu_2156_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        indvar_flatten_reg_2046 <= 14'd0;
    end else if (((icmp_ln40_fu_2954_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        indvar_flatten_reg_2046 <= add_ln40_1_fu_2948_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        j_1_reg_2057 <= 7'd0;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln40_reg_6069 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        j_1_reg_2057 <= select_ln40_1_reg_6078;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        j_2_reg_2102 <= 3'd0;
    end else if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln59_fu_3616_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        j_2_reg_2102 <= add_ln59_fu_3610_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_1999 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        j_reg_1999 <= add_ln21_reg_5919;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        k_1_reg_2068 <= 8'd0;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln40_reg_6069 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        k_1_reg_2068 <= add_ln44_reg_6094;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_2450_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        k_reg_2011 <= 9'd0;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln25_fu_2464_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        k_reg_2011 <= add_ln25_fu_2470_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        max_idx_V_reg_2125 <= 32'd4294967040;
    end else if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (icmp_ln109_reg_7768 == 1'd0))) begin
        max_idx_V_reg_2125 <= max_idx_V_1_fu_5797_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        max_val_V_reg_2137 <= 32'd4294935040;
    end else if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (icmp_ln109_reg_7768 == 1'd0))) begin
        max_val_V_reg_2137 <= max_val_V_1_fu_5777_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_2450_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        sum_V_4_reg_2022 <= 32'd0;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln25_reg_5938_pp1_iter1_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_V_4_reg_2022 <= {{ret_V_1_fu_2597_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        sum_V_5_reg_2079 <= 32'd0;
    end else if (((icmp_ln40_reg_6069_pp3_iter1_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        sum_V_5_reg_2079 <= sum_V_2_reg_6103;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_reg_5864_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        F2_reg_5906 <= F2_fu_2218_p2;
        icmp_ln571_reg_5898 <= icmp_ln571_fu_2212_p2;
        p_Result_8_reg_5888 <= ireg_fu_2178_p1[32'd63];
        trunc_ln565_reg_5893 <= trunc_ln565_fu_2208_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter0 == 1'b1))) begin
        add_ln109_reg_7763 <= add_ln109_fu_5754_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln21_reg_5919 <= add_ln21_fu_2444_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_2954_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        add_ln44_reg_6094 <= add_ln44_fu_3020_p2;
        select_ln40_1_reg_6078 <= select_ln40_1_fu_2980_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln885_1_fu_3098_p2 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        add_ln908_1_reg_6143 <= add_ln908_1_fu_3252_p2;
        icmp_ln908_1_reg_6138 <= icmp_ln908_1_fu_3238_p2;
        p_Result_14_reg_6128 <= temp_output2_0_V_q1[32'd31];
        select_ln908_2_reg_6153 <= select_ln908_2_fu_3270_p3;
        sub_ln909_1_reg_6148 <= sub_ln909_1_fu_3264_p2;
        tmp_V_5_reg_6133 <= tmp_V_5_fu_3118_p3;
        trunc_ln893_1_reg_6158 <= trunc_ln893_1_fu_3278_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln885_fu_2630_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln908_reg_6026 <= add_ln908_fu_2784_p2;
        icmp_ln908_reg_6021 <= icmp_ln908_fu_2770_p2;
        p_Result_10_reg_6011 <= temp_output_0_V_q1[32'd31];
        select_ln908_reg_6036 <= select_ln908_fu_2802_p3;
        sub_ln909_reg_6031 <= sub_ln909_fu_2796_p2;
        tmp_V_4_reg_6016 <= tmp_V_4_fu_2650_p3;
        trunc_ln893_reg_6041 <= trunc_ln893_fu_2810_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_fu_2162_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_cast_reg_5868[8 : 0] <= i_cast_fu_2168_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_cast_reg_5868_pp0_iter1_reg[8 : 0] <= i_cast_reg_5868[8 : 0];
        icmp_ln5_reg_5864 <= icmp_ln5_fu_2162_p2;
        icmp_ln5_reg_5864_pp0_iter1_reg <= icmp_ln5_reg_5864;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        i_cast_reg_5868_pp0_iter2_reg[8 : 0] <= i_cast_reg_5868_pp0_iter1_reg[8 : 0];
        icmp_ln5_reg_5864_pp0_iter2_reg <= icmp_ln5_reg_5864_pp0_iter1_reg;
        input_img_load_reg_5878_pp0_iter2_reg <= input_img_load_reg_5878;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        icmp_ln109_reg_7768 <= icmp_ln109_fu_5760_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln885_reg_6007 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln1506_1_reg_6056 <= icmp_ln1506_1_fu_2932_p2;
        icmp_ln1506_reg_6051 <= icmp_ln1506_fu_2926_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln885_1_reg_6124 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        icmp_ln1506_2_reg_6168 <= icmp_ln1506_2_fu_3394_p2;
        icmp_ln1506_3_reg_6173 <= icmp_ln1506_3_fu_3400_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln25_reg_5938 <= icmp_ln25_fu_2464_p2;
        icmp_ln25_reg_5938_pp1_iter1_reg <= icmp_ln25_reg_5938;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln40_reg_6069 <= icmp_ln40_fu_2954_p2;
        icmp_ln40_reg_6069_pp3_iter1_reg <= icmp_ln40_reg_6069;
        ifzero_reg_6099_pp3_iter1_reg <= ifzero_reg_6099;
        select_ln40_1_reg_6078_pp3_iter1_reg <= select_ln40_1_reg_6078;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_2954_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln44_reg_6073 <= icmp_ln44_fu_2966_p2;
        ifzero_reg_6099 <= ifzero_fu_3026_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        icmp_ln59_reg_7131 <= icmp_ln59_fu_3616_p2;
        icmp_ln59_reg_7131_pp5_iter1_reg <= icmp_ln59_reg_7131;
        j_2_cast_reg_7135_pp5_iter1_reg[2 : 0] <= j_2_cast_reg_7135[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp5_stage0_11001)) begin
        icmp_ln59_reg_7131_pp5_iter10_reg <= icmp_ln59_reg_7131_pp5_iter9_reg;
        icmp_ln59_reg_7131_pp5_iter11_reg <= icmp_ln59_reg_7131_pp5_iter10_reg;
        icmp_ln59_reg_7131_pp5_iter12_reg <= icmp_ln59_reg_7131_pp5_iter11_reg;
        icmp_ln59_reg_7131_pp5_iter13_reg <= icmp_ln59_reg_7131_pp5_iter12_reg;
        icmp_ln59_reg_7131_pp5_iter2_reg <= icmp_ln59_reg_7131_pp5_iter1_reg;
        icmp_ln59_reg_7131_pp5_iter3_reg <= icmp_ln59_reg_7131_pp5_iter2_reg;
        icmp_ln59_reg_7131_pp5_iter4_reg <= icmp_ln59_reg_7131_pp5_iter3_reg;
        icmp_ln59_reg_7131_pp5_iter5_reg <= icmp_ln59_reg_7131_pp5_iter4_reg;
        icmp_ln59_reg_7131_pp5_iter6_reg <= icmp_ln59_reg_7131_pp5_iter5_reg;
        icmp_ln59_reg_7131_pp5_iter7_reg <= icmp_ln59_reg_7131_pp5_iter6_reg;
        icmp_ln59_reg_7131_pp5_iter8_reg <= icmp_ln59_reg_7131_pp5_iter7_reg;
        icmp_ln59_reg_7131_pp5_iter9_reg <= icmp_ln59_reg_7131_pp5_iter8_reg;
        j_2_cast_reg_7135_pp5_iter10_reg[2 : 0] <= j_2_cast_reg_7135_pp5_iter9_reg[2 : 0];
        j_2_cast_reg_7135_pp5_iter11_reg[2 : 0] <= j_2_cast_reg_7135_pp5_iter10_reg[2 : 0];
        j_2_cast_reg_7135_pp5_iter12_reg[2 : 0] <= j_2_cast_reg_7135_pp5_iter11_reg[2 : 0];
        j_2_cast_reg_7135_pp5_iter13_reg[2 : 0] <= j_2_cast_reg_7135_pp5_iter12_reg[2 : 0];
        j_2_cast_reg_7135_pp5_iter2_reg[2 : 0] <= j_2_cast_reg_7135_pp5_iter1_reg[2 : 0];
        j_2_cast_reg_7135_pp5_iter3_reg[2 : 0] <= j_2_cast_reg_7135_pp5_iter2_reg[2 : 0];
        j_2_cast_reg_7135_pp5_iter4_reg[2 : 0] <= j_2_cast_reg_7135_pp5_iter3_reg[2 : 0];
        j_2_cast_reg_7135_pp5_iter5_reg[2 : 0] <= j_2_cast_reg_7135_pp5_iter4_reg[2 : 0];
        j_2_cast_reg_7135_pp5_iter6_reg[2 : 0] <= j_2_cast_reg_7135_pp5_iter5_reg[2 : 0];
        j_2_cast_reg_7135_pp5_iter7_reg[2 : 0] <= j_2_cast_reg_7135_pp5_iter6_reg[2 : 0];
        j_2_cast_reg_7135_pp5_iter8_reg[2 : 0] <= j_2_cast_reg_7135_pp5_iter7_reg[2 : 0];
        j_2_cast_reg_7135_pp5_iter9_reg[2 : 0] <= j_2_cast_reg_7135_pp5_iter8_reg[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln885_1_reg_6124 <= icmp_ln885_1_fu_3098_p2;
        temp_output2_0_V_addr_1_reg_6118_pp4_iter1_reg <= temp_output2_0_V_addr_1_reg_6118;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp4_stage0_11001)) begin
        icmp_ln885_1_reg_6124_pp4_iter2_reg <= icmp_ln885_1_reg_6124;
        temp_output2_0_V_addr_1_reg_6118_pp4_iter2_reg <= temp_output2_0_V_addr_1_reg_6118_pp4_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln885_reg_6007 <= icmp_ln885_fu_2630_p2;
        temp_output_0_V_addr_1_reg_6001_pp2_iter1_reg <= temp_output_0_V_addr_1_reg_6001;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln885_reg_6007_pp2_iter2_reg <= icmp_ln885_reg_6007;
        temp_output_0_V_addr_1_reg_6001_pp2_iter2_reg <= temp_output_0_V_addr_1_reg_6001_pp2_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_reg_5864 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_img_load_reg_5878 <= input_img_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln59_fu_3616_p2 == 1'd0))) begin
        j_2_cast_reg_7135[2 : 0] <= j_2_cast_fu_3622_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln59_reg_7131_pp5_iter12_reg == 1'd0))) begin
        layer3_weights_V_62_load_reg_7748 <= layer3_weights_V_62_q0;
        tmp_70_reg_7753 <= {{add_ln1192_60_fu_5669_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln59_reg_7131_pp5_iter6_reg == 1'd0))) begin
        mul_ln1118_11_reg_7508 <= mul_ln1118_11_fu_4728_p2;
        mul_ln703_24_reg_7498 <= mul_ln703_24_fu_4709_p2;
        mul_ln703_25_reg_7513 <= mul_ln703_25_fu_4737_p2;
        tmp_41_reg_7503 <= {{add_ln1192_31_fu_4699_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln59_reg_7131_pp5_iter7_reg == 1'd0))) begin
        mul_ln1118_13_reg_7543 <= mul_ln1118_13_fu_4878_p2;
        mul_ln703_27_reg_7553 <= mul_ln703_27_fu_4897_p2;
        mul_ln703_28_reg_7558 <= mul_ln703_28_fu_4906_p2;
        tmp_46_reg_7548 <= {{add_ln1192_36_fu_4868_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln59_reg_7131_pp5_iter8_reg == 1'd0))) begin
        mul_ln1118_15_reg_7588 <= mul_ln1118_15_fu_5047_p2;
        mul_ln1118_16_reg_7598 <= mul_ln1118_16_fu_5066_p2;
        mul_ln1118_17_reg_7603 <= mul_ln1118_17_fu_5075_p2;
        tmp_51_reg_7593 <= {{add_ln1192_41_fu_5037_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln59_reg_7131_pp5_iter10_reg == 1'd0))) begin
        mul_ln1118_18_reg_7678 <= mul_ln1118_18_fu_5381_p2;
        mul_ln703_37_reg_7688 <= mul_ln703_37_fu_5400_p2;
        mul_ln703_38_reg_7693 <= mul_ln703_38_fu_5409_p2;
        tmp_61_reg_7683 <= {{add_ln1192_51_fu_5371_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln59_reg_7131_pp5_iter1_reg == 1'd0))) begin
        mul_ln1118_4_reg_7283 <= mul_ln1118_4_fu_3895_p2;
        mul_ln703_6_reg_7273 <= mul_ln703_6_fu_3876_p2;
        mul_ln703_7_reg_7288 <= mul_ln703_7_fu_3904_p2;
        tmp_16_reg_7278 <= {{add_ln1192_6_fu_3866_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln59_reg_7131_pp5_iter3_reg == 1'd0))) begin
        mul_ln1118_7_reg_7373 <= mul_ln1118_7_fu_4229_p2;
        mul_ln703_13_reg_7363 <= mul_ln703_13_fu_4210_p2;
        mul_ln703_14_reg_7378 <= mul_ln703_14_fu_4238_p2;
        tmp_26_reg_7368 <= {{add_ln1192_16_fu_4200_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln59_reg_7131_pp5_iter2_reg == 1'd0))) begin
        mul_ln703_10_reg_7333 <= mul_ln703_10_fu_4077_p2;
        mul_ln703_8_reg_7318 <= mul_ln703_8_fu_4049_p2;
        mul_ln703_9_reg_7328 <= mul_ln703_9_fu_4068_p2;
        tmp_21_reg_7323 <= {{add_ln1192_11_fu_4039_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln59_reg_7131_pp5_iter4_reg == 1'd0))) begin
        mul_ln703_16_reg_7408 <= mul_ln703_16_fu_4379_p2;
        mul_ln703_17_reg_7418 <= mul_ln703_17_fu_4398_p2;
        mul_ln703_18_reg_7423 <= mul_ln703_18_fu_4407_p2;
        tmp_31_reg_7413 <= {{add_ln1192_21_fu_4369_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln59_reg_7131_pp5_iter5_reg == 1'd0))) begin
        mul_ln703_20_reg_7453 <= mul_ln703_20_fu_4544_p2;
        mul_ln703_21_reg_7463 <= mul_ln703_21_fu_4563_p2;
        mul_ln703_22_reg_7468 <= mul_ln703_22_fu_4572_p2;
        tmp_36_reg_7458 <= {{add_ln1192_26_fu_4534_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln59_reg_7131 == 1'd0))) begin
        mul_ln703_2_reg_7228 <= mul_ln703_2_fu_3711_p2;
        mul_ln703_3_reg_7238 <= mul_ln703_3_fu_3730_p2;
        mul_ln703_4_reg_7243 <= mul_ln703_4_fu_3739_p2;
        tmp_11_reg_7233 <= {{add_ln1192_1_fu_3701_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln59_reg_7131_pp5_iter9_reg == 1'd0))) begin
        mul_ln703_32_reg_7633 <= mul_ln703_32_fu_5220_p2;
        mul_ln703_33_reg_7643 <= mul_ln703_33_fu_5239_p2;
        mul_ln703_34_reg_7648 <= mul_ln703_34_fu_5248_p2;
        tmp_56_reg_7638 <= {{add_ln1192_46_fu_5210_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln59_reg_7131_pp5_iter11_reg == 1'd0))) begin
        mul_ln703_40_reg_7718 <= mul_ln703_40_fu_5550_p2;
        mul_ln703_41_reg_7728 <= mul_ln703_41_fu_5569_p2;
        tmp_66_reg_7723 <= {{add_ln1192_56_fu_5540_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln25_reg_5938 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        r_V_2_reg_5977 <= fp_input_img_V_q0;
        r_V_reg_5967 <= fp_input_img_V_q1;
        weights_layer1_weights_V_load_1_reg_5982 <= weights_layer1_weights_V_q0;
        weights_layer1_weights_V_load_reg_5972 <= weights_layer1_weights_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        sext_ln1116_10_reg_6856 <= sext_ln1116_10_fu_3446_p1;
        sext_ln1116_11_reg_6861 <= sext_ln1116_11_fu_3449_p1;
        sext_ln1116_12_reg_6866 <= sext_ln1116_12_fu_3452_p1;
        sext_ln1116_13_reg_6871 <= sext_ln1116_13_fu_3455_p1;
        sext_ln1116_14_reg_6876 <= sext_ln1116_14_fu_3458_p1;
        sext_ln1116_15_reg_6881 <= sext_ln1116_15_fu_3461_p1;
        sext_ln1116_16_reg_6886 <= sext_ln1116_16_fu_3464_p1;
        sext_ln1116_17_reg_6891 <= sext_ln1116_17_fu_3467_p1;
        sext_ln1116_18_reg_6896 <= sext_ln1116_18_fu_3470_p1;
        sext_ln1116_19_reg_6901 <= sext_ln1116_19_fu_3473_p1;
        sext_ln1116_1_reg_6811 <= sext_ln1116_1_fu_3419_p1;
        sext_ln1116_20_reg_6906 <= sext_ln1116_20_fu_3476_p1;
        sext_ln1116_21_reg_6911 <= sext_ln1116_21_fu_3479_p1;
        sext_ln1116_22_reg_6916 <= sext_ln1116_22_fu_3482_p1;
        sext_ln1116_23_reg_6921 <= sext_ln1116_23_fu_3485_p1;
        sext_ln1116_24_reg_6926 <= sext_ln1116_24_fu_3488_p1;
        sext_ln1116_25_reg_6931 <= sext_ln1116_25_fu_3491_p1;
        sext_ln1116_26_reg_6936 <= sext_ln1116_26_fu_3494_p1;
        sext_ln1116_27_reg_6941 <= sext_ln1116_27_fu_3497_p1;
        sext_ln1116_28_reg_6946 <= sext_ln1116_28_fu_3500_p1;
        sext_ln1116_29_reg_6951 <= sext_ln1116_29_fu_3503_p1;
        sext_ln1116_2_reg_6816 <= sext_ln1116_2_fu_3422_p1;
        sext_ln1116_30_reg_6956 <= sext_ln1116_30_fu_3506_p1;
        sext_ln1116_31_reg_6961 <= sext_ln1116_31_fu_3509_p1;
        sext_ln1116_32_reg_6966 <= sext_ln1116_32_fu_3512_p1;
        sext_ln1116_33_reg_6971 <= sext_ln1116_33_fu_3515_p1;
        sext_ln1116_34_reg_6976 <= sext_ln1116_34_fu_3518_p1;
        sext_ln1116_35_reg_6981 <= sext_ln1116_35_fu_3521_p1;
        sext_ln1116_36_reg_6986 <= sext_ln1116_36_fu_3524_p1;
        sext_ln1116_37_reg_6991 <= sext_ln1116_37_fu_3527_p1;
        sext_ln1116_38_reg_6996 <= sext_ln1116_38_fu_3530_p1;
        sext_ln1116_39_reg_7001 <= sext_ln1116_39_fu_3533_p1;
        sext_ln1116_3_reg_6821 <= sext_ln1116_3_fu_3425_p1;
        sext_ln1116_40_reg_7006 <= sext_ln1116_40_fu_3536_p1;
        sext_ln1116_41_reg_7011 <= sext_ln1116_41_fu_3539_p1;
        sext_ln1116_42_reg_7016 <= sext_ln1116_42_fu_3542_p1;
        sext_ln1116_43_reg_7021 <= sext_ln1116_43_fu_3545_p1;
        sext_ln1116_44_reg_7026 <= sext_ln1116_44_fu_3548_p1;
        sext_ln1116_45_reg_7031 <= sext_ln1116_45_fu_3551_p1;
        sext_ln1116_46_reg_7036 <= sext_ln1116_46_fu_3554_p1;
        sext_ln1116_47_reg_7041 <= sext_ln1116_47_fu_3557_p1;
        sext_ln1116_48_reg_7046 <= sext_ln1116_48_fu_3560_p1;
        sext_ln1116_49_reg_7051 <= sext_ln1116_49_fu_3563_p1;
        sext_ln1116_4_reg_6826 <= sext_ln1116_4_fu_3428_p1;
        sext_ln1116_50_reg_7056 <= sext_ln1116_50_fu_3566_p1;
        sext_ln1116_51_reg_7061 <= sext_ln1116_51_fu_3569_p1;
        sext_ln1116_52_reg_7066 <= sext_ln1116_52_fu_3572_p1;
        sext_ln1116_53_reg_7071 <= sext_ln1116_53_fu_3575_p1;
        sext_ln1116_54_reg_7076 <= sext_ln1116_54_fu_3578_p1;
        sext_ln1116_55_reg_7081 <= sext_ln1116_55_fu_3581_p1;
        sext_ln1116_56_reg_7086 <= sext_ln1116_56_fu_3584_p1;
        sext_ln1116_57_reg_7091 <= sext_ln1116_57_fu_3587_p1;
        sext_ln1116_58_reg_7096 <= sext_ln1116_58_fu_3590_p1;
        sext_ln1116_59_reg_7101 <= sext_ln1116_59_fu_3593_p1;
        sext_ln1116_5_reg_6831 <= sext_ln1116_5_fu_3431_p1;
        sext_ln1116_60_reg_7106 <= sext_ln1116_60_fu_3596_p1;
        sext_ln1116_61_reg_7111 <= sext_ln1116_61_fu_3599_p1;
        sext_ln1116_62_reg_7116 <= sext_ln1116_62_fu_3602_p1;
        sext_ln1116_6_reg_6836 <= sext_ln1116_6_fu_3434_p1;
        sext_ln1116_7_reg_6841 <= sext_ln1116_7_fu_3437_p1;
        sext_ln1116_8_reg_6846 <= sext_ln1116_8_fu_3440_p1;
        sext_ln1116_9_reg_6851 <= sext_ln1116_9_fu_3443_p1;
        sext_ln1116_reg_6806 <= sext_ln1116_fu_3416_p1;
        temp_output2_0_V_load_63_cast_reg_7121 <= temp_output2_0_V_load_63_cast_fu_3606_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln40_reg_6069 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        sum_V_2_reg_6103 <= {{ret_V_2_fu_3061_p2[39:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_fu_3087_p2 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        temp_output2_0_V_addr_1_reg_6118 <= i_2_cast_fu_3093_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        temp_output2_0_V_load_10_reg_6286 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_11_reg_6291 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        temp_output2_0_V_load_12_reg_6306 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_13_reg_6311 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        temp_output2_0_V_load_14_reg_6326 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_15_reg_6331 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        temp_output2_0_V_load_16_reg_6346 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_17_reg_6351 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        temp_output2_0_V_load_18_reg_6366 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_19_reg_6371 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        temp_output2_0_V_load_1_reg_6191 <= temp_output2_0_V_q1;
        temp_output2_0_V_load_reg_6186 <= temp_output2_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        temp_output2_0_V_load_20_reg_6386 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_21_reg_6391 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        temp_output2_0_V_load_22_reg_6406 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_23_reg_6411 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        temp_output2_0_V_load_24_reg_6426 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_25_reg_6431 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        temp_output2_0_V_load_26_reg_6446 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_27_reg_6451 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        temp_output2_0_V_load_28_reg_6466 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_29_reg_6471 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        temp_output2_0_V_load_2_reg_6206 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_3_reg_6211 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        temp_output2_0_V_load_30_reg_6486 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_31_reg_6491 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        temp_output2_0_V_load_32_reg_6506 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_33_reg_6511 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        temp_output2_0_V_load_34_reg_6526 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_35_reg_6531 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        temp_output2_0_V_load_36_reg_6546 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_37_reg_6551 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        temp_output2_0_V_load_38_reg_6566 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_39_reg_6571 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        temp_output2_0_V_load_40_reg_6586 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_41_reg_6591 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        temp_output2_0_V_load_42_reg_6606 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_43_reg_6611 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        temp_output2_0_V_load_44_reg_6626 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_45_reg_6631 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        temp_output2_0_V_load_46_reg_6646 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_47_reg_6651 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        temp_output2_0_V_load_48_reg_6666 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_49_reg_6671 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        temp_output2_0_V_load_4_reg_6226 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_5_reg_6231 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        temp_output2_0_V_load_50_reg_6686 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_51_reg_6691 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        temp_output2_0_V_load_52_reg_6706 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_53_reg_6711 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        temp_output2_0_V_load_54_reg_6726 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_55_reg_6731 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        temp_output2_0_V_load_56_reg_6746 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_57_reg_6751 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        temp_output2_0_V_load_58_reg_6766 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_59_reg_6771 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        temp_output2_0_V_load_60_reg_6786 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_61_reg_6791 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        temp_output2_0_V_load_6_reg_6246 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_7_reg_6251 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        temp_output2_0_V_load_8_reg_6266 <= temp_output2_0_V_q0;
        temp_output2_0_V_load_9_reg_6271 <= temp_output2_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln77_fu_2619_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        temp_output_0_V_addr_1_reg_6001 <= i_1_cast_fu_2625_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_2450_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        zext_ln21_1_reg_5933[7 : 0] <= zext_ln21_1_fu_2460_p1[7 : 0];
        zext_ln21_reg_5928[7 : 0] <= zext_ln21_fu_2456_p1[7 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln5_fu_2162_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_condition_pp1_exit_iter1_state9 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter1_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_fu_2464_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln77_fu_2619_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln40_fu_2954_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state17 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state17 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln92_fu_3087_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln59_fu_3616_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state58 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state58 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0_subdone) & (1'b1 == ap_CS_fsm_pp6_stage0) & (icmp_ln109_fu_5760_p2 == 1'd1))) begin
        ap_condition_pp6_flush_enable = 1'b1;
    end else begin
        ap_condition_pp6_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter3 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter14 == 1'b0) & (ap_enable_reg_pp5_iter13 == 1'b0) & (ap_enable_reg_pp5_iter12 == 1'b0) & (ap_enable_reg_pp5_iter11 == 1'b0) & (ap_enable_reg_pp5_iter10 == 1'b0) & (ap_enable_reg_pp5_iter9 == 1'b0) & (ap_enable_reg_pp5_iter8 == 1'b0) & (ap_enable_reg_pp5_iter7 == 1'b0) & (ap_enable_reg_pp5_iter6 == 1'b0) & (ap_enable_reg_pp5_iter5 == 1'b0) & (ap_enable_reg_pp5_iter4 == 1'b0) & (ap_enable_reg_pp5_iter3 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter0 == 1'b0))) begin
        ap_idle_pp6 = 1'b1;
    end else begin
        ap_idle_pp6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (icmp_ln109_reg_7768 == 1'd0))) begin
        ap_phi_mux_i_3_phi_fu_2117_p4 = add_ln109_reg_7763;
    end else begin
        ap_phi_mux_i_3_phi_fu_2117_p4 = i_3_reg_2113;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln40_reg_6069 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        ap_phi_mux_j_1_phi_fu_2061_p4 = select_ln40_1_reg_6078;
    end else begin
        ap_phi_mux_j_1_phi_fu_2061_p4 = j_1_reg_2057;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln40_reg_6069 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        ap_phi_mux_k_1_phi_fu_2072_p4 = add_ln44_reg_6094;
    end else begin
        ap_phi_mux_k_1_phi_fu_2072_p4 = k_1_reg_2068;
    end
end

always @ (*) begin
    if (((icmp_ln40_reg_6069_pp3_iter1_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        ap_phi_mux_sum_V_5_phi_fu_2083_p4 = sum_V_2_reg_6103;
    end else begin
        ap_phi_mux_sum_V_5_phi_fu_2083_p4 = sum_V_5_reg_2079;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        fp_input_img_V_address0 = zext_ln23_fu_2510_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        fp_input_img_V_address0 = i_cast_reg_5868_pp0_iter2_reg;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        fp_input_img_V_address0 = 64'd0;
    end else begin
        fp_input_img_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        fp_input_img_V_ce0 = 1'b1;
    end else begin
        fp_input_img_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        fp_input_img_V_ce1 = 1'b1;
    end else begin
        fp_input_img_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        fp_input_img_V_d0 = select_ln571_4_fu_2435_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        fp_input_img_V_d0 = 32'd256;
    end else begin
        fp_input_img_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln5_reg_5864_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        fp_input_img_V_we0 = 1'b1;
    end else begin
        fp_input_img_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        grp_fu_2151_p0 = bitcast_ln734_1_fu_3379_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        grp_fu_2151_p0 = bitcast_ln734_fu_2911_p1;
    end else begin
        grp_fu_2151_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_img_ce0 = 1'b1;
    end else begin
        input_img_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        layer3_weights_V_0_ce0 = 1'b1;
    end else begin
        layer3_weights_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1))) begin
        layer3_weights_V_10_ce0 = 1'b1;
    end else begin
        layer3_weights_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        layer3_weights_V_11_ce0 = 1'b1;
    end else begin
        layer3_weights_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        layer3_weights_V_12_ce0 = 1'b1;
    end else begin
        layer3_weights_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        layer3_weights_V_13_ce0 = 1'b1;
    end else begin
        layer3_weights_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        layer3_weights_V_14_ce0 = 1'b1;
    end else begin
        layer3_weights_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        layer3_weights_V_15_ce0 = 1'b1;
    end else begin
        layer3_weights_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter3 == 1'b1))) begin
        layer3_weights_V_16_ce0 = 1'b1;
    end else begin
        layer3_weights_V_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter3 == 1'b1))) begin
        layer3_weights_V_17_ce0 = 1'b1;
    end else begin
        layer3_weights_V_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter3 == 1'b1))) begin
        layer3_weights_V_18_ce0 = 1'b1;
    end else begin
        layer3_weights_V_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter3 == 1'b1))) begin
        layer3_weights_V_19_ce0 = 1'b1;
    end else begin
        layer3_weights_V_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        layer3_weights_V_1_ce0 = 1'b1;
    end else begin
        layer3_weights_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter3 == 1'b1))) begin
        layer3_weights_V_20_ce0 = 1'b1;
    end else begin
        layer3_weights_V_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter4 == 1'b1))) begin
        layer3_weights_V_21_ce0 = 1'b1;
    end else begin
        layer3_weights_V_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter4 == 1'b1))) begin
        layer3_weights_V_22_ce0 = 1'b1;
    end else begin
        layer3_weights_V_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter4 == 1'b1))) begin
        layer3_weights_V_23_ce0 = 1'b1;
    end else begin
        layer3_weights_V_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter4 == 1'b1))) begin
        layer3_weights_V_24_ce0 = 1'b1;
    end else begin
        layer3_weights_V_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter4 == 1'b1))) begin
        layer3_weights_V_25_ce0 = 1'b1;
    end else begin
        layer3_weights_V_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter5 == 1'b1))) begin
        layer3_weights_V_26_ce0 = 1'b1;
    end else begin
        layer3_weights_V_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter5 == 1'b1))) begin
        layer3_weights_V_27_ce0 = 1'b1;
    end else begin
        layer3_weights_V_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter5 == 1'b1))) begin
        layer3_weights_V_28_ce0 = 1'b1;
    end else begin
        layer3_weights_V_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter5 == 1'b1))) begin
        layer3_weights_V_29_ce0 = 1'b1;
    end else begin
        layer3_weights_V_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        layer3_weights_V_2_ce0 = 1'b1;
    end else begin
        layer3_weights_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter5 == 1'b1))) begin
        layer3_weights_V_30_ce0 = 1'b1;
    end else begin
        layer3_weights_V_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter6 == 1'b1))) begin
        layer3_weights_V_31_ce0 = 1'b1;
    end else begin
        layer3_weights_V_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter6 == 1'b1))) begin
        layer3_weights_V_32_ce0 = 1'b1;
    end else begin
        layer3_weights_V_32_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter6 == 1'b1))) begin
        layer3_weights_V_33_ce0 = 1'b1;
    end else begin
        layer3_weights_V_33_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter6 == 1'b1))) begin
        layer3_weights_V_34_ce0 = 1'b1;
    end else begin
        layer3_weights_V_34_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter6 == 1'b1))) begin
        layer3_weights_V_35_ce0 = 1'b1;
    end else begin
        layer3_weights_V_35_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter7 == 1'b1))) begin
        layer3_weights_V_36_ce0 = 1'b1;
    end else begin
        layer3_weights_V_36_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter7 == 1'b1))) begin
        layer3_weights_V_37_ce0 = 1'b1;
    end else begin
        layer3_weights_V_37_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter7 == 1'b1))) begin
        layer3_weights_V_38_ce0 = 1'b1;
    end else begin
        layer3_weights_V_38_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter7 == 1'b1))) begin
        layer3_weights_V_39_ce0 = 1'b1;
    end else begin
        layer3_weights_V_39_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        layer3_weights_V_3_ce0 = 1'b1;
    end else begin
        layer3_weights_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter7 == 1'b1))) begin
        layer3_weights_V_40_ce0 = 1'b1;
    end else begin
        layer3_weights_V_40_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter8 == 1'b1))) begin
        layer3_weights_V_41_ce0 = 1'b1;
    end else begin
        layer3_weights_V_41_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter8 == 1'b1))) begin
        layer3_weights_V_42_ce0 = 1'b1;
    end else begin
        layer3_weights_V_42_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter8 == 1'b1))) begin
        layer3_weights_V_43_ce0 = 1'b1;
    end else begin
        layer3_weights_V_43_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter8 == 1'b1))) begin
        layer3_weights_V_44_ce0 = 1'b1;
    end else begin
        layer3_weights_V_44_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter8 == 1'b1))) begin
        layer3_weights_V_45_ce0 = 1'b1;
    end else begin
        layer3_weights_V_45_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter9 == 1'b1))) begin
        layer3_weights_V_46_ce0 = 1'b1;
    end else begin
        layer3_weights_V_46_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter9 == 1'b1))) begin
        layer3_weights_V_47_ce0 = 1'b1;
    end else begin
        layer3_weights_V_47_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter9 == 1'b1))) begin
        layer3_weights_V_48_ce0 = 1'b1;
    end else begin
        layer3_weights_V_48_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter9 == 1'b1))) begin
        layer3_weights_V_49_ce0 = 1'b1;
    end else begin
        layer3_weights_V_49_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        layer3_weights_V_4_ce0 = 1'b1;
    end else begin
        layer3_weights_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter9 == 1'b1))) begin
        layer3_weights_V_50_ce0 = 1'b1;
    end else begin
        layer3_weights_V_50_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter10 == 1'b1))) begin
        layer3_weights_V_51_ce0 = 1'b1;
    end else begin
        layer3_weights_V_51_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter10 == 1'b1))) begin
        layer3_weights_V_52_ce0 = 1'b1;
    end else begin
        layer3_weights_V_52_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter10 == 1'b1))) begin
        layer3_weights_V_53_ce0 = 1'b1;
    end else begin
        layer3_weights_V_53_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter10 == 1'b1))) begin
        layer3_weights_V_54_ce0 = 1'b1;
    end else begin
        layer3_weights_V_54_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter10 == 1'b1))) begin
        layer3_weights_V_55_ce0 = 1'b1;
    end else begin
        layer3_weights_V_55_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter11 == 1'b1))) begin
        layer3_weights_V_56_ce0 = 1'b1;
    end else begin
        layer3_weights_V_56_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter11 == 1'b1))) begin
        layer3_weights_V_57_ce0 = 1'b1;
    end else begin
        layer3_weights_V_57_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter11 == 1'b1))) begin
        layer3_weights_V_58_ce0 = 1'b1;
    end else begin
        layer3_weights_V_58_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter11 == 1'b1))) begin
        layer3_weights_V_59_ce0 = 1'b1;
    end else begin
        layer3_weights_V_59_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        layer3_weights_V_5_ce0 = 1'b1;
    end else begin
        layer3_weights_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter12 == 1'b1))) begin
        layer3_weights_V_60_ce0 = 1'b1;
    end else begin
        layer3_weights_V_60_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter12 == 1'b1))) begin
        layer3_weights_V_61_ce0 = 1'b1;
    end else begin
        layer3_weights_V_61_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter12 == 1'b1))) begin
        layer3_weights_V_62_ce0 = 1'b1;
    end else begin
        layer3_weights_V_62_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter13 == 1'b1))) begin
        layer3_weights_V_63_ce0 = 1'b1;
    end else begin
        layer3_weights_V_63_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1))) begin
        layer3_weights_V_6_ce0 = 1'b1;
    end else begin
        layer3_weights_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1))) begin
        layer3_weights_V_7_ce0 = 1'b1;
    end else begin
        layer3_weights_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1))) begin
        layer3_weights_V_8_ce0 = 1'b1;
    end else begin
        layer3_weights_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1))) begin
        layer3_weights_V_9_ce0 = 1'b1;
    end else begin
        layer3_weights_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        temp_output2_0_V_address0 = 64'd62;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        temp_output2_0_V_address0 = 64'd60;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        temp_output2_0_V_address0 = 64'd58;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        temp_output2_0_V_address0 = 64'd56;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        temp_output2_0_V_address0 = 64'd54;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        temp_output2_0_V_address0 = 64'd52;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        temp_output2_0_V_address0 = 64'd50;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        temp_output2_0_V_address0 = 64'd48;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        temp_output2_0_V_address0 = 64'd46;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        temp_output2_0_V_address0 = 64'd44;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        temp_output2_0_V_address0 = 64'd42;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        temp_output2_0_V_address0 = 64'd40;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        temp_output2_0_V_address0 = 64'd38;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        temp_output2_0_V_address0 = 64'd36;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        temp_output2_0_V_address0 = 64'd34;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        temp_output2_0_V_address0 = 64'd32;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        temp_output2_0_V_address0 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        temp_output2_0_V_address0 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        temp_output2_0_V_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        temp_output2_0_V_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        temp_output2_0_V_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        temp_output2_0_V_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        temp_output2_0_V_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        temp_output2_0_V_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        temp_output2_0_V_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        temp_output2_0_V_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        temp_output2_0_V_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        temp_output2_0_V_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        temp_output2_0_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        temp_output2_0_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        temp_output2_0_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        temp_output2_0_V_address0 = temp_output2_0_V_addr_reg_5914;
    end else if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter3 == 1'b1))) begin
        temp_output2_0_V_address0 = temp_output2_0_V_addr_1_reg_6118_pp4_iter2_reg;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        temp_output2_0_V_address0 = zext_ln40_fu_3077_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output2_0_V_address0 = 64'd0;
    end else begin
        temp_output2_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        temp_output2_0_V_address1 = 64'd63;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        temp_output2_0_V_address1 = 64'd61;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        temp_output2_0_V_address1 = 64'd59;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        temp_output2_0_V_address1 = 64'd57;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        temp_output2_0_V_address1 = 64'd55;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        temp_output2_0_V_address1 = 64'd53;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        temp_output2_0_V_address1 = 64'd51;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        temp_output2_0_V_address1 = 64'd49;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        temp_output2_0_V_address1 = 64'd47;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        temp_output2_0_V_address1 = 64'd45;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        temp_output2_0_V_address1 = 64'd43;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        temp_output2_0_V_address1 = 64'd41;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        temp_output2_0_V_address1 = 64'd39;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        temp_output2_0_V_address1 = 64'd37;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        temp_output2_0_V_address1 = 64'd35;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        temp_output2_0_V_address1 = 64'd33;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        temp_output2_0_V_address1 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        temp_output2_0_V_address1 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        temp_output2_0_V_address1 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        temp_output2_0_V_address1 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        temp_output2_0_V_address1 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        temp_output2_0_V_address1 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        temp_output2_0_V_address1 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        temp_output2_0_V_address1 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        temp_output2_0_V_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        temp_output2_0_V_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        temp_output2_0_V_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        temp_output2_0_V_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        temp_output2_0_V_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        temp_output2_0_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        temp_output2_0_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        temp_output2_0_V_address1 = 64'd1;
    end else if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        temp_output2_0_V_address1 = i_2_cast_fu_3093_p1;
    end else begin
        temp_output2_0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter3 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
        temp_output2_0_V_ce0 = 1'b1;
    end else begin
        temp_output2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        temp_output2_0_V_ce1 = 1'b1;
    end else begin
        temp_output2_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter3 == 1'b1))) begin
        temp_output2_0_V_d0 = 32'd0;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        temp_output2_0_V_d0 = sum_V_2_reg_6103;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output2_0_V_d0 = 32'd256;
    end else begin
        temp_output2_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((icmp_ln885_1_reg_6124_pp4_iter2_reg == 1'd0) & (1'd1 == and_ln1506_1_fu_3410_p2) & (1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter3 == 1'b1)) | ((ifzero_reg_6099_pp3_iter1_reg == 1'd1) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
        temp_output2_0_V_we0 = 1'b1;
    end else begin
        temp_output2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter0 == 1'b1))) begin
        temp_output3_0_V_address0 = trunc_ln731_cast59_fu_5766_p1;
    end else if (((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter14 == 1'b1))) begin
        temp_output3_0_V_address0 = j_2_cast_reg_7135_pp5_iter13_reg;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output3_0_V_address0 = 64'd0;
    end else begin
        temp_output3_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter0 == 1'b1)) | ((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter14 == 1'b1)))) begin
        temp_output3_0_V_ce0 = 1'b1;
    end else begin
        temp_output3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter14 == 1'b1))) begin
        temp_output3_0_V_d0 = {{add_ln1192_62_fu_5737_p2[39:8]}};
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output3_0_V_d0 = 32'd256;
    end else begin
        temp_output3_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter14 == 1'b1) & (icmp_ln59_reg_7131_pp5_iter13_reg == 1'd0)))) begin
        temp_output3_0_V_we0 = 1'b1;
    end else begin
        temp_output3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
        temp_output_0_V_address0 = temp_output_0_V_addr_1_reg_6001_pp2_iter2_reg;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        temp_output_0_V_address0 = zext_ln21_reg_5928;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output_0_V_address0 = 64'd0;
    end else begin
        temp_output_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        temp_output_0_V_address1 = k_1_cast_fu_2992_p1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        temp_output_0_V_address1 = i_1_cast_fu_2625_p1;
    end else begin
        temp_output_0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter3 == 1'b1)))) begin
        temp_output_0_V_ce0 = 1'b1;
    end else begin
        temp_output_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        temp_output_0_V_ce1 = 1'b1;
    end else begin
        temp_output_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
        temp_output_0_V_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        temp_output_0_V_d0 = sum_V_4_reg_2022;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_output_0_V_d0 = 32'd256;
    end else begin
        temp_output_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11) | ((icmp_ln885_reg_6007_pp2_iter2_reg == 1'd0) & (1'd1 == and_ln1506_fu_2942_p2) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter3 == 1'b1)))) begin
        temp_output_0_V_we0 = 1'b1;
    end else begin
        temp_output_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        weights_layer1_weights_V_ce0 = 1'b1;
    end else begin
        weights_layer1_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        weights_layer1_weights_V_ce1 = 1'b1;
    end else begin
        weights_layer1_weights_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        weights_layer2_weights_V_ce0 = 1'b1;
    end else begin
        weights_layer2_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln5_fu_2162_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln5_fu_2162_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln21_fu_2450_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((icmp_ln77_fu_2619_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter3 == 1'b1) & (ap_enable_reg_pp2_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((icmp_ln77_fu_2619_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter3 == 1'b1) & (ap_enable_reg_pp2_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln40_fu_2954_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)) & ~((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln40_fu_2954_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)) | ((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((icmp_ln92_fu_3087_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter3 == 1'b1) & (ap_enable_reg_pp4_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((icmp_ln92_fu_3087_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0)) | ((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter3 == 1'b1) & (ap_enable_reg_pp4_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_pp5_stage0;
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0) & (icmp_ln59_fu_3616_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter14 == 1'b1) & (ap_enable_reg_pp5_iter13 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter14 == 1'b1) & (ap_enable_reg_pp5_iter13 == 1'b0)) | ((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0) & (icmp_ln59_fu_3616_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_pp6_stage0;
        end
        ap_ST_fsm_pp6_stage0 : begin
            if (~((1'b0 == ap_block_pp6_stage0_subdone) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (ap_enable_reg_pp6_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else if (((1'b0 == ap_block_pp6_stage0_subdone) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (ap_enable_reg_pp6_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_2218_p2 = (12'd1075 - zext_ln455_fu_2204_p1);

assign add_ln109_fu_5754_p2 = (ap_phi_mux_i_3_phi_fu_2117_p4 + 3'd1);

assign add_ln1118_1_fu_3009_p2 = (tmp_10_cast_fu_3001_p3 + select_ln40_1_cast_fu_2988_p1);

assign add_ln1118_fu_2523_p2 = (tmp_8_fu_2515_p3 + zext_ln21_1_reg_5933);

assign add_ln1192_10_fu_4002_p2 = ($signed(shl_ln728_s_fu_3990_p3) + $signed(sext_ln703_4_fu_3998_p1));

assign add_ln1192_11_fu_4039_p2 = ($signed(shl_ln728_10_fu_4027_p3) + $signed(sext_ln703_5_fu_4035_p1));

assign add_ln1192_12_fu_4089_p2 = (shl_ln728_11_fu_4082_p3 + mul_ln703_8_reg_7318);

assign add_ln1192_13_fu_4112_p2 = (shl_ln728_12_fu_4104_p3 + mul_ln703_9_reg_7328);

assign add_ln1192_14_fu_4135_p2 = (shl_ln728_13_fu_4127_p3 + mul_ln703_10_reg_7333);

assign add_ln1192_15_fu_4167_p2 = (shl_ln728_14_fu_4159_p3 + mul_ln703_11_fu_4144_p2);

assign add_ln1192_16_fu_4200_p2 = (shl_ln728_15_fu_4192_p3 + mul_ln703_12_fu_4177_p2);

assign add_ln1192_17_fu_4250_p2 = (shl_ln728_16_fu_4243_p3 + mul_ln703_13_reg_7363);

assign add_ln1192_18_fu_4276_p2 = ($signed(shl_ln728_17_fu_4265_p3) + $signed(sext_ln703_6_fu_4273_p1));

assign add_ln1192_19_fu_4300_p2 = (shl_ln728_18_fu_4292_p3 + mul_ln703_14_reg_7378);

assign add_ln1192_1_fu_3701_p2 = (shl_ln728_1_fu_3693_p3 + mul_ln703_1_fu_3678_p2);

assign add_ln1192_20_fu_4336_p2 = ($signed(shl_ln728_19_fu_4324_p3) + $signed(sext_ln703_7_fu_4332_p1));

assign add_ln1192_21_fu_4369_p2 = (shl_ln728_20_fu_4361_p3 + mul_ln703_15_fu_4346_p2);

assign add_ln1192_22_fu_4419_p2 = (shl_ln728_21_fu_4412_p3 + mul_ln703_16_reg_7408);

assign add_ln1192_23_fu_4442_p2 = (shl_ln728_22_fu_4434_p3 + mul_ln703_17_reg_7418);

assign add_ln1192_24_fu_4465_p2 = (shl_ln728_23_fu_4457_p3 + mul_ln703_18_reg_7423);

assign add_ln1192_25_fu_4497_p2 = (shl_ln728_24_fu_4489_p3 + mul_ln703_19_fu_4474_p2);

assign add_ln1192_26_fu_4534_p2 = ($signed(shl_ln728_25_fu_4522_p3) + $signed(sext_ln703_8_fu_4530_p1));

assign add_ln1192_27_fu_4584_p2 = (shl_ln728_26_fu_4577_p3 + mul_ln703_20_reg_7453);

assign add_ln1192_28_fu_4607_p2 = (shl_ln728_27_fu_4599_p3 + mul_ln703_21_reg_7463);

assign add_ln1192_29_fu_4630_p2 = (shl_ln728_28_fu_4622_p3 + mul_ln703_22_reg_7468);

assign add_ln1192_2_fu_3751_p2 = (shl_ln728_2_fu_3744_p3 + mul_ln703_2_reg_7228);

assign add_ln1192_30_fu_4666_p2 = ($signed(shl_ln728_29_fu_4654_p3) + $signed(sext_ln703_9_fu_4662_p1));

assign add_ln1192_31_fu_4699_p2 = (shl_ln728_30_fu_4691_p3 + mul_ln703_23_fu_4676_p2);

assign add_ln1192_32_fu_4749_p2 = (shl_ln728_31_fu_4742_p3 + mul_ln703_24_reg_7498);

assign add_ln1192_33_fu_4775_p2 = ($signed(shl_ln728_32_fu_4764_p3) + $signed(sext_ln703_10_fu_4772_p1));

assign add_ln1192_34_fu_4799_p2 = (shl_ln728_33_fu_4791_p3 + mul_ln703_25_reg_7513);

assign add_ln1192_35_fu_4831_p2 = (shl_ln728_34_fu_4823_p3 + mul_ln703_26_fu_4808_p2);

assign add_ln1192_36_fu_4868_p2 = ($signed(shl_ln728_35_fu_4856_p3) + $signed(sext_ln703_11_fu_4864_p1));

assign add_ln1192_37_fu_4921_p2 = ($signed(shl_ln728_36_fu_4911_p3) + $signed(sext_ln703_12_fu_4918_p1));

assign add_ln1192_38_fu_4945_p2 = (shl_ln728_37_fu_4937_p3 + mul_ln703_27_reg_7553);

assign add_ln1192_39_fu_4968_p2 = (shl_ln728_38_fu_4960_p3 + mul_ln703_28_reg_7558);

assign add_ln1192_3_fu_3774_p2 = (shl_ln728_3_fu_3766_p3 + mul_ln703_3_reg_7238);

assign add_ln1192_40_fu_5000_p2 = (shl_ln728_39_fu_4992_p3 + mul_ln703_29_fu_4977_p2);

assign add_ln1192_41_fu_5037_p2 = ($signed(shl_ln728_40_fu_5025_p3) + $signed(sext_ln703_13_fu_5033_p1));

assign add_ln1192_42_fu_5090_p2 = ($signed(shl_ln728_41_fu_5080_p3) + $signed(sext_ln703_14_fu_5087_p1));

assign add_ln1192_43_fu_5117_p2 = ($signed(shl_ln728_42_fu_5106_p3) + $signed(sext_ln703_15_fu_5114_p1));

assign add_ln1192_44_fu_5144_p2 = ($signed(shl_ln728_43_fu_5133_p3) + $signed(sext_ln703_16_fu_5141_p1));

assign add_ln1192_45_fu_5177_p2 = (shl_ln728_44_fu_5169_p3 + mul_ln703_30_fu_5154_p2);

assign add_ln1192_46_fu_5210_p2 = (shl_ln728_45_fu_5202_p3 + mul_ln703_31_fu_5187_p2);

assign add_ln1192_47_fu_5260_p2 = (shl_ln728_46_fu_5253_p3 + mul_ln703_32_reg_7633);

assign add_ln1192_48_fu_5283_p2 = (shl_ln728_47_fu_5275_p3 + mul_ln703_33_reg_7643);

assign add_ln1192_49_fu_5306_p2 = (shl_ln728_48_fu_5298_p3 + mul_ln703_34_reg_7648);

assign add_ln1192_4_fu_3797_p2 = (shl_ln728_4_fu_3789_p3 + mul_ln703_4_reg_7243);

assign add_ln1192_50_fu_5338_p2 = (shl_ln728_49_fu_5330_p3 + mul_ln703_35_fu_5315_p2);

assign add_ln1192_51_fu_5371_p2 = (shl_ln728_50_fu_5363_p3 + mul_ln703_36_fu_5348_p2);

assign add_ln1192_52_fu_5424_p2 = ($signed(shl_ln728_51_fu_5414_p3) + $signed(sext_ln703_17_fu_5421_p1));

assign add_ln1192_53_fu_5448_p2 = (shl_ln728_52_fu_5440_p3 + mul_ln703_37_reg_7688);

assign add_ln1192_54_fu_5471_p2 = (shl_ln728_53_fu_5463_p3 + mul_ln703_38_reg_7693);

assign add_ln1192_55_fu_5507_p2 = ($signed(shl_ln728_54_fu_5495_p3) + $signed(sext_ln703_18_fu_5503_p1));

assign add_ln1192_56_fu_5540_p2 = (shl_ln728_55_fu_5532_p3 + mul_ln703_39_fu_5517_p2);

assign add_ln1192_57_fu_5581_p2 = (shl_ln728_56_fu_5574_p3 + mul_ln703_40_reg_7718);

assign add_ln1192_58_fu_5604_p2 = (shl_ln728_57_fu_5596_p3 + mul_ln703_41_reg_7728);

assign add_ln1192_59_fu_5636_p2 = (shl_ln728_58_fu_5628_p3 + mul_ln703_42_fu_5613_p2);

assign add_ln1192_5_fu_3833_p2 = ($signed(shl_ln728_5_fu_3821_p3) + $signed(sext_ln703_2_fu_3829_p1));

assign add_ln1192_60_fu_5669_p2 = (shl_ln728_59_fu_5661_p3 + mul_ln703_43_fu_5646_p2);

assign add_ln1192_61_fu_5704_p2 = ($signed(shl_ln728_60_fu_5693_p3) + $signed(sext_ln703_19_fu_5700_p1));

assign add_ln1192_62_fu_5737_p2 = (shl_ln728_61_fu_5729_p3 + mul_ln703_44_fu_5714_p2);

assign add_ln1192_6_fu_3866_p2 = (shl_ln728_6_fu_3858_p3 + mul_ln703_5_fu_3843_p2);

assign add_ln1192_7_fu_3916_p2 = (shl_ln728_7_fu_3909_p3 + mul_ln703_6_reg_7273);

assign add_ln1192_8_fu_3942_p2 = ($signed(shl_ln728_8_fu_3931_p3) + $signed(sext_ln703_3_fu_3939_p1));

assign add_ln1192_9_fu_3966_p2 = (shl_ln728_9_fu_3958_p3 + mul_ln703_7_reg_7288);

assign add_ln1192_fu_3668_p2 = (shl_ln_fu_3660_p3 + mul_ln703_fu_3645_p2);

assign add_ln21_fu_2444_p2 = (j_reg_1999 + 8'd1);

assign add_ln25_fu_2470_p2 = (k_reg_2011 + 9'd2);

assign add_ln40_1_fu_2948_p2 = (indvar_flatten_reg_2046 + 14'd1);

assign add_ln40_fu_2960_p2 = (ap_phi_mux_j_1_phi_fu_2061_p4 + 7'd1);

assign add_ln44_fu_3020_p2 = (select_ln40_fu_2972_p3 + 8'd1);

assign add_ln581_fu_2253_p2 = ($signed(F2_reg_5906) + $signed(12'd4088));

assign add_ln59_fu_3610_p2 = (j_2_reg_2102 + 3'd1);

assign add_ln5_fu_2156_p2 = (i_reg_1988 + 9'd1);

assign add_ln77_fu_2613_p2 = (i_1_reg_2035 + 8'd1);

assign add_ln908_1_fu_3252_p2 = ($signed(sub_ln894_1_fu_3144_p2) + $signed(32'd4294967242));

assign add_ln908_fu_2784_p2 = ($signed(sub_ln894_fu_2676_p2) + $signed(32'd4294967242));

assign add_ln915_1_fu_3354_p2 = (sub_ln915_1_fu_3349_p2 + select_ln893_1_fu_3341_p3);

assign add_ln915_fu_2886_p2 = (sub_ln915_fu_2881_p2 + select_ln893_fu_2873_p3);

assign add_ln92_fu_3081_p2 = (i_2_reg_2091 + 7'd1);

assign and_ln1506_1_fu_3410_p2 = (or_ln1506_1_fu_3406_p2 & grp_fu_2151_p2);

assign and_ln1506_fu_2942_p2 = (or_ln1506_fu_2938_p2 & grp_fu_2151_p2);

assign and_ln581_fu_2357_p2 = (xor_ln582_fu_2351_p2 & icmp_ln581_fu_2248_p2);

assign and_ln582_fu_2340_p2 = (xor_ln571_fu_2335_p2 & icmp_ln582_fu_2275_p2);

assign and_ln585_fu_2369_p2 = (icmp_ln585_fu_2363_p2 & and_ln581_fu_2357_p2);

assign and_ln603_fu_2387_p2 = (xor_ln581_fu_2381_p2 & icmp_ln603_fu_2294_p2);

assign and_ln899_1_fu_2790_p2 = (xor_ln899_fu_2756_p2 & p_Result_12_fu_2762_p3);

assign and_ln899_2_fu_3204_p2 = (tmp_V_5_fu_3118_p3 & or_ln899_fu_3198_p2);

assign and_ln899_3_fu_3258_p2 = (xor_ln899_1_fu_3224_p2 & p_Result_16_fu_3230_p3);

assign and_ln899_fu_2736_p2 = (tmp_V_4_fu_2650_p3 & or_ln899_2_fu_2730_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_pp6_stage0 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd47];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp4_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp5_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp5_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp5_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp5_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp5_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp5_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp5_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp5_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp5_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp5_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp5_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp5_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp6_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp6_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_enable_pp6 = (ap_idle_pp6 ^ 1'b1);

assign ap_return = $signed(ret_V_6_fu_5847_p3);

assign ashr_ln586_fu_2304_p2 = $signed(man_V_2_fu_2241_p3) >>> zext_ln586_fu_2300_p1;

assign bitcast_ln734_1_fu_3379_p1 = p_Result_17_fu_3367_p5;

assign bitcast_ln734_fu_2911_p1 = p_Result_13_fu_2899_p5;

assign exp_tmp_fu_2194_p4 = {{ireg_fu_2178_p1[62:52]}};

assign fp_input_img_V_address1 = k_cast58_fu_2476_p1;

assign grp_fu_2148_p0 = input_img_q0;

assign i_1_cast_fu_2625_p1 = i_1_reg_2035;

assign i_2_cast_fu_3093_p1 = i_2_reg_2091;

assign i_cast_fu_2168_p1 = i_reg_1988;

assign icmp_ln109_fu_5760_p2 = ((ap_phi_mux_i_3_phi_fu_2117_p4 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_5771_p2 = (($signed(temp_output3_0_V_q0) > $signed(max_val_V_reg_2137)) ? 1'b1 : 1'b0);

assign icmp_ln1506_1_fu_2932_p2 = ((trunc_ln6_fu_2916_p4 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln1506_2_fu_3394_p2 = ((add_ln915_1_fu_3354_p2 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln1506_3_fu_3400_p2 = ((trunc_ln1506_1_fu_3384_p4 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln1506_fu_2926_p2 = ((add_ln915_fu_2886_p2 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_2450_p2 = ((j_reg_1999 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_2464_p2 = ((k_reg_2011 < 9'd400) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_2954_p2 = ((indvar_flatten_reg_2046 == 14'd8192) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_2966_p2 = ((ap_phi_mux_k_1_phi_fu_2072_p4 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_2212_p2 = ((trunc_ln555_fu_2182_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_2248_p2 = (($signed(F2_reg_5906) > $signed(12'd8)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_2275_p2 = ((F2_reg_5906 == 12'd8) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_2363_p2 = ((sh_amt_fu_2263_p3 > 12'd53) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_3616_p2 = ((j_2_reg_2102 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln5_fu_2162_p2 = ((i_reg_1988 == 9'd400) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_2294_p2 = ((tmp_5_fu_2284_p4 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_2619_p2 = ((i_1_reg_2035 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln851_fu_5827_p2 = ((trunc_ln851_fu_5823_p1 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln885_1_fu_3098_p2 = ((temp_output2_0_V_q1 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln885_fu_2630_p2 = ((temp_output_0_V_q1 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln896_1_fu_3166_p2 = (($signed(tmp_79_fu_3156_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln896_fu_2698_p2 = (($signed(tmp_75_fu_2688_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln899_1_fu_3210_p2 = ((and_ln899_2_fu_3204_p2 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln899_fu_2742_p2 = ((and_ln899_fu_2736_p2 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln908_1_fu_3238_p2 = (($signed(lsb_index_1_fu_3150_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln908_fu_2770_p2 = (($signed(lsb_index_fu_2682_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_3087_p2 = ((i_2_reg_2091 == 7'd64) ? 1'b1 : 1'b0);

assign ifzero_fu_3026_p2 = ((add_ln44_fu_3020_p2 == 8'd128) ? 1'b1 : 1'b0);

assign input_img_address0 = i_cast_fu_2168_p1;

assign ireg_fu_2178_p1 = grp_fu_2148_p1;

assign j_2_cast_fu_3622_p1 = j_2_reg_2102;

assign k_1_cast_fu_2992_p1 = select_ln40_fu_2972_p3;

assign k_cast58_fu_2476_p1 = k_reg_2011;


always @ (p_Result_15_fu_3126_p4) begin
    if (p_Result_15_fu_3126_p4[0] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd0;
    end else if (p_Result_15_fu_3126_p4[1] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd1;
    end else if (p_Result_15_fu_3126_p4[2] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd2;
    end else if (p_Result_15_fu_3126_p4[3] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd3;
    end else if (p_Result_15_fu_3126_p4[4] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd4;
    end else if (p_Result_15_fu_3126_p4[5] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd5;
    end else if (p_Result_15_fu_3126_p4[6] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd6;
    end else if (p_Result_15_fu_3126_p4[7] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd7;
    end else if (p_Result_15_fu_3126_p4[8] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd8;
    end else if (p_Result_15_fu_3126_p4[9] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd9;
    end else if (p_Result_15_fu_3126_p4[10] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd10;
    end else if (p_Result_15_fu_3126_p4[11] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd11;
    end else if (p_Result_15_fu_3126_p4[12] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd12;
    end else if (p_Result_15_fu_3126_p4[13] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd13;
    end else if (p_Result_15_fu_3126_p4[14] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd14;
    end else if (p_Result_15_fu_3126_p4[15] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd15;
    end else if (p_Result_15_fu_3126_p4[16] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd16;
    end else if (p_Result_15_fu_3126_p4[17] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd17;
    end else if (p_Result_15_fu_3126_p4[18] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd18;
    end else if (p_Result_15_fu_3126_p4[19] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd19;
    end else if (p_Result_15_fu_3126_p4[20] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd20;
    end else if (p_Result_15_fu_3126_p4[21] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd21;
    end else if (p_Result_15_fu_3126_p4[22] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd22;
    end else if (p_Result_15_fu_3126_p4[23] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd23;
    end else if (p_Result_15_fu_3126_p4[24] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd24;
    end else if (p_Result_15_fu_3126_p4[25] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd25;
    end else if (p_Result_15_fu_3126_p4[26] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd26;
    end else if (p_Result_15_fu_3126_p4[27] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd27;
    end else if (p_Result_15_fu_3126_p4[28] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd28;
    end else if (p_Result_15_fu_3126_p4[29] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd29;
    end else if (p_Result_15_fu_3126_p4[30] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd30;
    end else if (p_Result_15_fu_3126_p4[31] == 1'b1) begin
        l_1_fu_3136_p3 = 32'd31;
    end else begin
        l_1_fu_3136_p3 = 32'd32;
    end
end


always @ (p_Result_11_fu_2658_p4) begin
    if (p_Result_11_fu_2658_p4[0] == 1'b1) begin
        l_fu_2668_p3 = 32'd0;
    end else if (p_Result_11_fu_2658_p4[1] == 1'b1) begin
        l_fu_2668_p3 = 32'd1;
    end else if (p_Result_11_fu_2658_p4[2] == 1'b1) begin
        l_fu_2668_p3 = 32'd2;
    end else if (p_Result_11_fu_2658_p4[3] == 1'b1) begin
        l_fu_2668_p3 = 32'd3;
    end else if (p_Result_11_fu_2658_p4[4] == 1'b1) begin
        l_fu_2668_p3 = 32'd4;
    end else if (p_Result_11_fu_2658_p4[5] == 1'b1) begin
        l_fu_2668_p3 = 32'd5;
    end else if (p_Result_11_fu_2658_p4[6] == 1'b1) begin
        l_fu_2668_p3 = 32'd6;
    end else if (p_Result_11_fu_2658_p4[7] == 1'b1) begin
        l_fu_2668_p3 = 32'd7;
    end else if (p_Result_11_fu_2658_p4[8] == 1'b1) begin
        l_fu_2668_p3 = 32'd8;
    end else if (p_Result_11_fu_2658_p4[9] == 1'b1) begin
        l_fu_2668_p3 = 32'd9;
    end else if (p_Result_11_fu_2658_p4[10] == 1'b1) begin
        l_fu_2668_p3 = 32'd10;
    end else if (p_Result_11_fu_2658_p4[11] == 1'b1) begin
        l_fu_2668_p3 = 32'd11;
    end else if (p_Result_11_fu_2658_p4[12] == 1'b1) begin
        l_fu_2668_p3 = 32'd12;
    end else if (p_Result_11_fu_2658_p4[13] == 1'b1) begin
        l_fu_2668_p3 = 32'd13;
    end else if (p_Result_11_fu_2658_p4[14] == 1'b1) begin
        l_fu_2668_p3 = 32'd14;
    end else if (p_Result_11_fu_2658_p4[15] == 1'b1) begin
        l_fu_2668_p3 = 32'd15;
    end else if (p_Result_11_fu_2658_p4[16] == 1'b1) begin
        l_fu_2668_p3 = 32'd16;
    end else if (p_Result_11_fu_2658_p4[17] == 1'b1) begin
        l_fu_2668_p3 = 32'd17;
    end else if (p_Result_11_fu_2658_p4[18] == 1'b1) begin
        l_fu_2668_p3 = 32'd18;
    end else if (p_Result_11_fu_2658_p4[19] == 1'b1) begin
        l_fu_2668_p3 = 32'd19;
    end else if (p_Result_11_fu_2658_p4[20] == 1'b1) begin
        l_fu_2668_p3 = 32'd20;
    end else if (p_Result_11_fu_2658_p4[21] == 1'b1) begin
        l_fu_2668_p3 = 32'd21;
    end else if (p_Result_11_fu_2658_p4[22] == 1'b1) begin
        l_fu_2668_p3 = 32'd22;
    end else if (p_Result_11_fu_2658_p4[23] == 1'b1) begin
        l_fu_2668_p3 = 32'd23;
    end else if (p_Result_11_fu_2658_p4[24] == 1'b1) begin
        l_fu_2668_p3 = 32'd24;
    end else if (p_Result_11_fu_2658_p4[25] == 1'b1) begin
        l_fu_2668_p3 = 32'd25;
    end else if (p_Result_11_fu_2658_p4[26] == 1'b1) begin
        l_fu_2668_p3 = 32'd26;
    end else if (p_Result_11_fu_2658_p4[27] == 1'b1) begin
        l_fu_2668_p3 = 32'd27;
    end else if (p_Result_11_fu_2658_p4[28] == 1'b1) begin
        l_fu_2668_p3 = 32'd28;
    end else if (p_Result_11_fu_2658_p4[29] == 1'b1) begin
        l_fu_2668_p3 = 32'd29;
    end else if (p_Result_11_fu_2658_p4[30] == 1'b1) begin
        l_fu_2668_p3 = 32'd30;
    end else if (p_Result_11_fu_2658_p4[31] == 1'b1) begin
        l_fu_2668_p3 = 32'd31;
    end else begin
        l_fu_2668_p3 = 32'd32;
    end
end

assign layer3_weights_V_0_address0 = j_2_cast_fu_3622_p1;

assign layer3_weights_V_10_address0 = j_2_cast_reg_7135;

assign layer3_weights_V_11_address0 = j_2_cast_reg_7135_pp5_iter1_reg;

assign layer3_weights_V_12_address0 = j_2_cast_reg_7135_pp5_iter1_reg;

assign layer3_weights_V_13_address0 = j_2_cast_reg_7135_pp5_iter1_reg;

assign layer3_weights_V_14_address0 = j_2_cast_reg_7135_pp5_iter1_reg;

assign layer3_weights_V_15_address0 = j_2_cast_reg_7135_pp5_iter1_reg;

assign layer3_weights_V_16_address0 = j_2_cast_reg_7135_pp5_iter2_reg;

assign layer3_weights_V_17_address0 = j_2_cast_reg_7135_pp5_iter2_reg;

assign layer3_weights_V_18_address0 = j_2_cast_reg_7135_pp5_iter2_reg;

assign layer3_weights_V_19_address0 = j_2_cast_reg_7135_pp5_iter2_reg;

assign layer3_weights_V_1_address0 = j_2_cast_fu_3622_p1;

assign layer3_weights_V_20_address0 = j_2_cast_reg_7135_pp5_iter2_reg;

assign layer3_weights_V_21_address0 = j_2_cast_reg_7135_pp5_iter3_reg;

assign layer3_weights_V_22_address0 = j_2_cast_reg_7135_pp5_iter3_reg;

assign layer3_weights_V_23_address0 = j_2_cast_reg_7135_pp5_iter3_reg;

assign layer3_weights_V_24_address0 = j_2_cast_reg_7135_pp5_iter3_reg;

assign layer3_weights_V_25_address0 = j_2_cast_reg_7135_pp5_iter3_reg;

assign layer3_weights_V_26_address0 = j_2_cast_reg_7135_pp5_iter4_reg;

assign layer3_weights_V_27_address0 = j_2_cast_reg_7135_pp5_iter4_reg;

assign layer3_weights_V_28_address0 = j_2_cast_reg_7135_pp5_iter4_reg;

assign layer3_weights_V_29_address0 = j_2_cast_reg_7135_pp5_iter4_reg;

assign layer3_weights_V_2_address0 = j_2_cast_fu_3622_p1;

assign layer3_weights_V_30_address0 = j_2_cast_reg_7135_pp5_iter4_reg;

assign layer3_weights_V_31_address0 = j_2_cast_reg_7135_pp5_iter5_reg;

assign layer3_weights_V_32_address0 = j_2_cast_reg_7135_pp5_iter5_reg;

assign layer3_weights_V_33_address0 = j_2_cast_reg_7135_pp5_iter5_reg;

assign layer3_weights_V_34_address0 = j_2_cast_reg_7135_pp5_iter5_reg;

assign layer3_weights_V_35_address0 = j_2_cast_reg_7135_pp5_iter5_reg;

assign layer3_weights_V_36_address0 = j_2_cast_reg_7135_pp5_iter6_reg;

assign layer3_weights_V_37_address0 = j_2_cast_reg_7135_pp5_iter6_reg;

assign layer3_weights_V_38_address0 = j_2_cast_reg_7135_pp5_iter6_reg;

assign layer3_weights_V_39_address0 = j_2_cast_reg_7135_pp5_iter6_reg;

assign layer3_weights_V_3_address0 = j_2_cast_fu_3622_p1;

assign layer3_weights_V_40_address0 = j_2_cast_reg_7135_pp5_iter6_reg;

assign layer3_weights_V_41_address0 = j_2_cast_reg_7135_pp5_iter7_reg;

assign layer3_weights_V_42_address0 = j_2_cast_reg_7135_pp5_iter7_reg;

assign layer3_weights_V_43_address0 = j_2_cast_reg_7135_pp5_iter7_reg;

assign layer3_weights_V_44_address0 = j_2_cast_reg_7135_pp5_iter7_reg;

assign layer3_weights_V_45_address0 = j_2_cast_reg_7135_pp5_iter7_reg;

assign layer3_weights_V_46_address0 = j_2_cast_reg_7135_pp5_iter8_reg;

assign layer3_weights_V_47_address0 = j_2_cast_reg_7135_pp5_iter8_reg;

assign layer3_weights_V_48_address0 = j_2_cast_reg_7135_pp5_iter8_reg;

assign layer3_weights_V_49_address0 = j_2_cast_reg_7135_pp5_iter8_reg;

assign layer3_weights_V_4_address0 = j_2_cast_fu_3622_p1;

assign layer3_weights_V_50_address0 = j_2_cast_reg_7135_pp5_iter8_reg;

assign layer3_weights_V_51_address0 = j_2_cast_reg_7135_pp5_iter9_reg;

assign layer3_weights_V_52_address0 = j_2_cast_reg_7135_pp5_iter9_reg;

assign layer3_weights_V_53_address0 = j_2_cast_reg_7135_pp5_iter9_reg;

assign layer3_weights_V_54_address0 = j_2_cast_reg_7135_pp5_iter9_reg;

assign layer3_weights_V_55_address0 = j_2_cast_reg_7135_pp5_iter9_reg;

assign layer3_weights_V_56_address0 = j_2_cast_reg_7135_pp5_iter10_reg;

assign layer3_weights_V_57_address0 = j_2_cast_reg_7135_pp5_iter10_reg;

assign layer3_weights_V_58_address0 = j_2_cast_reg_7135_pp5_iter10_reg;

assign layer3_weights_V_59_address0 = j_2_cast_reg_7135_pp5_iter10_reg;

assign layer3_weights_V_5_address0 = j_2_cast_fu_3622_p1;

assign layer3_weights_V_60_address0 = j_2_cast_reg_7135_pp5_iter11_reg;

assign layer3_weights_V_61_address0 = j_2_cast_reg_7135_pp5_iter11_reg;

assign layer3_weights_V_62_address0 = j_2_cast_reg_7135_pp5_iter11_reg;

assign layer3_weights_V_63_address0 = j_2_cast_reg_7135_pp5_iter12_reg;

assign layer3_weights_V_6_address0 = j_2_cast_reg_7135;

assign layer3_weights_V_7_address0 = j_2_cast_reg_7135;

assign layer3_weights_V_8_address0 = j_2_cast_reg_7135;

assign layer3_weights_V_9_address0 = j_2_cast_reg_7135;

assign lhs_1_fu_2545_p3 = {{sum_V_4_reg_2022}, {8'd0}};

assign lhs_2_fu_2585_p3 = {{tmp_9_fu_2575_p4}, {8'd0}};

assign lhs_4_fu_3053_p3 = {{select_ln40_2_fu_3046_p3}, {8'd0}};

assign lsb_index_1_fu_3150_p2 = ($signed(sub_ln894_1_fu_3144_p2) + $signed(32'd4294967243));

assign lsb_index_fu_2682_p2 = ($signed(sub_ln894_fu_2676_p2) + $signed(32'd4294967243));

assign lshr_ln897_1_fu_3186_p2 = 32'd4294967295 >> zext_ln897_1_fu_3182_p1;

assign lshr_ln897_fu_2718_p2 = 32'd4294967295 >> zext_ln897_fu_2714_p1;

assign lshr_ln908_1_fu_3288_p2 = zext_ln907_1_fu_3282_p1 >> zext_ln908_1_fu_3285_p1;

assign lshr_ln908_fu_2820_p2 = zext_ln907_fu_2814_p1 >> zext_ln908_fu_2817_p1;

assign m_2_fu_2835_p3 = ((icmp_ln908_reg_6021[0:0] == 1'b1) ? lshr_ln908_fu_2820_p2 : shl_ln909_fu_2829_p2);

assign m_3_fu_2845_p2 = (m_2_fu_2835_p3 + zext_ln911_fu_2842_p1);

assign m_4_fu_3303_p3 = ((icmp_ln908_1_reg_6138[0:0] == 1'b1) ? lshr_ln908_1_fu_3288_p2 : shl_ln909_1_fu_3297_p2);

assign m_5_fu_3313_p2 = (m_4_fu_3303_p3 + zext_ln911_1_fu_3310_p1);

assign m_8_fu_2851_p4 = {{m_3_fu_2845_p2[63:1]}};

assign m_fu_3319_p4 = {{m_5_fu_3313_p2[63:1]}};

assign man_V_1_fu_2235_p2 = (54'd0 - zext_ln569_fu_2231_p1);

assign man_V_2_fu_2241_p3 = ((p_Result_8_reg_5888[0:0] == 1'b1) ? man_V_1_fu_2235_p2 : zext_ln569_fu_2231_p1);

assign max_idx_V_1_fu_5797_p3 = ((icmp_ln1494_fu_5771_p2[0:0] == 1'b1) ? zext_ln111_fu_5793_p1 : max_idx_V_reg_2125);

assign max_val_V_1_fu_5777_p3 = ((icmp_ln1494_fu_5771_p2[0:0] == 1'b1) ? temp_output3_0_V_q0 : max_val_V_reg_2137);

assign mul_ln1118_10_fu_4639_p1 = sext_ln1116_31_reg_6961;

assign mul_ln1118_11_fu_4728_p1 = sext_ln1116_34_reg_6976;

assign mul_ln1118_12_fu_4841_p1 = sext_ln1116_37_reg_6991;

assign mul_ln1118_13_fu_4878_p1 = sext_ln1116_38_reg_6996;

assign mul_ln1118_14_fu_5010_p1 = sext_ln1116_42_reg_7016;

assign mul_ln1118_15_fu_5047_p1 = sext_ln1116_43_reg_7021;

assign mul_ln1118_16_fu_5066_p1 = sext_ln1116_44_reg_7026;

assign mul_ln1118_17_fu_5075_p1 = sext_ln1116_45_reg_7031;

assign mul_ln1118_18_fu_5381_p1 = sext_ln1116_53_reg_7071;

assign mul_ln1118_19_fu_5480_p1 = sext_ln1116_56_reg_7086;

assign mul_ln1118_20_fu_5688_p1 = sext_ln1116_62_reg_7116;

assign mul_ln1118_3_fu_3806_p1 = sext_ln1116_6_reg_6836;

assign mul_ln1118_4_fu_3895_p1 = sext_ln1116_9_reg_6851;

assign mul_ln1118_5_fu_3975_p1 = sext_ln1116_11_reg_6861;

assign mul_ln1118_6_fu_4012_p1 = sext_ln1116_12_reg_6866;

assign mul_ln1118_7_fu_4229_p1 = sext_ln1116_19_reg_6901;

assign mul_ln1118_8_fu_4309_p1 = sext_ln1116_21_reg_6911;

assign mul_ln1118_9_fu_4507_p1 = sext_ln1116_27_reg_6941;

assign mul_ln1118_fu_3636_p1 = sext_ln1116_reg_6806;

assign mul_ln703_10_fu_4077_p1 = sext_ln1116_15_reg_6881;

assign mul_ln703_11_fu_4144_p1 = sext_ln1116_16_reg_6886;

assign mul_ln703_12_fu_4177_p1 = sext_ln1116_17_reg_6891;

assign mul_ln703_13_fu_4210_p1 = sext_ln1116_18_reg_6896;

assign mul_ln703_14_fu_4238_p1 = sext_ln1116_20_reg_6906;

assign mul_ln703_15_fu_4346_p1 = sext_ln1116_22_reg_6916;

assign mul_ln703_16_fu_4379_p1 = sext_ln1116_23_reg_6921;

assign mul_ln703_17_fu_4398_p1 = sext_ln1116_24_reg_6926;

assign mul_ln703_18_fu_4407_p1 = sext_ln1116_25_reg_6931;

assign mul_ln703_19_fu_4474_p1 = sext_ln1116_26_reg_6936;

assign mul_ln703_1_fu_3678_p1 = sext_ln1116_2_reg_6816;

assign mul_ln703_20_fu_4544_p1 = sext_ln1116_28_reg_6946;

assign mul_ln703_21_fu_4563_p1 = sext_ln1116_29_reg_6951;

assign mul_ln703_22_fu_4572_p1 = sext_ln1116_30_reg_6956;

assign mul_ln703_23_fu_4676_p1 = sext_ln1116_32_reg_6966;

assign mul_ln703_24_fu_4709_p1 = sext_ln1116_33_reg_6971;

assign mul_ln703_25_fu_4737_p1 = sext_ln1116_35_reg_6981;

assign mul_ln703_26_fu_4808_p1 = sext_ln1116_36_reg_6986;

assign mul_ln703_27_fu_4897_p1 = sext_ln1116_39_reg_7001;

assign mul_ln703_28_fu_4906_p1 = sext_ln1116_40_reg_7006;

assign mul_ln703_29_fu_4977_p1 = sext_ln1116_41_reg_7011;

assign mul_ln703_2_fu_3711_p1 = sext_ln1116_3_reg_6821;

assign mul_ln703_30_fu_5154_p1 = sext_ln1116_46_reg_7036;

assign mul_ln703_31_fu_5187_p1 = sext_ln1116_47_reg_7041;

assign mul_ln703_32_fu_5220_p1 = sext_ln1116_48_reg_7046;

assign mul_ln703_33_fu_5239_p1 = sext_ln1116_49_reg_7051;

assign mul_ln703_34_fu_5248_p1 = sext_ln1116_50_reg_7056;

assign mul_ln703_35_fu_5315_p1 = sext_ln1116_51_reg_7061;

assign mul_ln703_36_fu_5348_p1 = sext_ln1116_52_reg_7066;

assign mul_ln703_37_fu_5400_p1 = sext_ln1116_54_reg_7076;

assign mul_ln703_38_fu_5409_p1 = sext_ln1116_55_reg_7081;

assign mul_ln703_39_fu_5517_p1 = sext_ln1116_57_reg_7091;

assign mul_ln703_3_fu_3730_p1 = sext_ln1116_4_reg_6826;

assign mul_ln703_40_fu_5550_p1 = sext_ln1116_58_reg_7096;

assign mul_ln703_41_fu_5569_p1 = sext_ln1116_59_reg_7101;

assign mul_ln703_42_fu_5613_p1 = sext_ln1116_60_reg_7106;

assign mul_ln703_43_fu_5646_p1 = sext_ln1116_61_reg_7111;

assign mul_ln703_44_fu_5714_p1 = temp_output2_0_V_load_63_cast_reg_7121;

assign mul_ln703_4_fu_3739_p1 = sext_ln1116_5_reg_6831;

assign mul_ln703_5_fu_3843_p1 = sext_ln1116_7_reg_6841;

assign mul_ln703_6_fu_3876_p1 = sext_ln1116_8_reg_6846;

assign mul_ln703_7_fu_3904_p1 = sext_ln1116_10_reg_6856;

assign mul_ln703_8_fu_4049_p1 = sext_ln1116_13_reg_6871;

assign mul_ln703_9_fu_4068_p1 = sext_ln1116_14_reg_6876;

assign mul_ln703_fu_3645_p1 = sext_ln1116_1_reg_6811;

assign or_ln1506_1_fu_3406_p2 = (icmp_ln1506_3_reg_6173 | icmp_ln1506_2_reg_6168);

assign or_ln1506_fu_2938_p2 = (icmp_ln1506_reg_6051 | icmp_ln1506_1_reg_6056);

assign or_ln25_fu_2504_p2 = (k_reg_2011 | 9'd1);

assign or_ln571_1_fu_2429_p2 = (or_ln571_fu_2400_p2 | and_ln581_fu_2357_p2);

assign or_ln571_fu_2400_p2 = (icmp_ln571_reg_5898 | and_ln603_fu_2387_p2);

assign or_ln581_fu_2375_p2 = (or_ln582_fu_2346_p2 | icmp_ln581_fu_2248_p2);

assign or_ln582_fu_2346_p2 = (icmp_ln582_fu_2275_p2 | icmp_ln571_reg_5898);

assign or_ln899_2_fu_2730_p2 = (shl_ln899_fu_2724_p2 | lshr_ln897_fu_2718_p2);

assign or_ln899_fu_3198_p2 = (shl_ln899_1_fu_3192_p2 | lshr_ln897_1_fu_3186_p2);

assign p_Result_10_fu_2636_p3 = temp_output_0_V_q1[32'd31];

integer ap_tvar_int_0;

always @ (tmp_V_4_fu_2650_p3) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            p_Result_11_fu_2658_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_11_fu_2658_p4[ap_tvar_int_0] = tmp_V_4_fu_2650_p3[31 - ap_tvar_int_0];
        end
    end
end

assign p_Result_12_fu_2762_p3 = tmp_V_4_fu_2650_p3[lsb_index_fu_2682_p2];

assign p_Result_13_fu_2899_p5 = {{tmp_1_fu_2892_p3}, {zext_ln912_fu_2861_p1[51:0]}};

assign p_Result_14_fu_3104_p3 = temp_output2_0_V_q1[32'd31];

integer ap_tvar_int_1;

always @ (tmp_V_5_fu_3118_p3) begin
    for (ap_tvar_int_1 = 32 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 31 - 0) begin
            p_Result_15_fu_3126_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            p_Result_15_fu_3126_p4[ap_tvar_int_1] = tmp_V_5_fu_3118_p3[31 - ap_tvar_int_1];
        end
    end
end

assign p_Result_16_fu_3230_p3 = tmp_V_5_fu_3118_p3[lsb_index_1_fu_3150_p2];

assign p_Result_17_fu_3367_p5 = {{tmp_2_fu_3360_p3}, {zext_ln912_1_fu_3329_p1[51:0]}};

assign p_Result_5_fu_3333_p3 = m_5_fu_3313_p2[32'd54];

assign p_Result_7_fu_5815_p3 = max_idx_V_reg_2125[32'd31];

assign p_Result_9_fu_2224_p3 = {{1'd1}, {trunc_ln565_reg_5893}};

assign p_Result_s_fu_2865_p3 = m_3_fu_2845_p2[32'd54];

assign ret_V_1_fu_2597_p2 = ($signed(lhs_2_fu_2585_p3) + $signed(sext_ln703_1_fu_2593_p1));

assign ret_V_2_fu_3061_p2 = (lhs_4_fu_3053_p3 + r_V_5_fu_3040_p2);

assign ret_V_3_fu_5805_p4 = {{max_idx_V_reg_2125[31:8]}};

assign ret_V_4_fu_5833_p2 = (ret_V_3_fu_5805_p4 + 24'd1);

assign ret_V_6_fu_5847_p3 = ((p_Result_7_fu_5815_p3[0:0] == 1'b1) ? select_ln850_fu_5839_p3 : ret_V_3_fu_5805_p4);

assign ret_V_fu_2557_p2 = ($signed(lhs_1_fu_2545_p3) + $signed(sext_ln703_fu_2553_p1));

assign select_ln40_1_cast_fu_2988_p1 = select_ln40_1_fu_2980_p3;

assign select_ln40_1_fu_2980_p3 = ((icmp_ln44_fu_2966_p2[0:0] == 1'b1) ? add_ln40_fu_2960_p2 : ap_phi_mux_j_1_phi_fu_2061_p4);

assign select_ln40_2_fu_3046_p3 = ((icmp_ln44_reg_6073[0:0] == 1'b1) ? 32'd0 : ap_phi_mux_sum_V_5_phi_fu_2083_p4);

assign select_ln40_fu_2972_p3 = ((icmp_ln44_fu_2966_p2[0:0] == 1'b1) ? 8'd0 : ap_phi_mux_k_1_phi_fu_2072_p4);

assign select_ln571_1_fu_2405_p3 = ((and_ln585_fu_2369_p2[0:0] == 1'b1) ? select_ln588_fu_2321_p3 : trunc_ln586_fu_2310_p1);

assign select_ln571_2_fu_2413_p3 = ((and_ln582_fu_2340_p2[0:0] == 1'b1) ? trunc_ln583_fu_2280_p1 : 32'd0);

assign select_ln571_3_fu_2421_p3 = ((or_ln571_fu_2400_p2[0:0] == 1'b1) ? select_ln571_fu_2393_p3 : select_ln571_1_fu_2405_p3);

assign select_ln571_4_fu_2435_p3 = ((or_ln571_1_fu_2429_p2[0:0] == 1'b1) ? select_ln571_3_fu_2421_p3 : select_ln571_2_fu_2413_p3);

assign select_ln571_fu_2393_p3 = ((icmp_ln571_reg_5898[0:0] == 1'b1) ? 32'd0 : shl_ln604_fu_2329_p2);

assign select_ln588_fu_2321_p3 = ((tmp_10_fu_2314_p3[0:0] == 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln850_fu_5839_p3 = ((icmp_ln851_fu_5827_p2[0:0] == 1'b1) ? ret_V_3_fu_5805_p4 : ret_V_4_fu_5833_p2);

assign select_ln893_1_fu_3341_p3 = ((p_Result_5_fu_3333_p3[0:0] == 1'b1) ? 11'd1023 : 11'd1022);

assign select_ln893_fu_2873_p3 = ((p_Result_s_fu_2865_p3[0:0] == 1'b1) ? 11'd1023 : 11'd1022);

assign select_ln896_1_fu_3244_p3 = ((icmp_ln896_1_fu_3166_p2[0:0] == 1'b1) ? icmp_ln899_1_fu_3210_p2 : p_Result_16_fu_3230_p3);

assign select_ln896_fu_2776_p3 = ((icmp_ln896_fu_2698_p2[0:0] == 1'b1) ? icmp_ln899_fu_2742_p2 : p_Result_12_fu_2762_p3);

assign select_ln908_2_fu_3270_p3 = ((icmp_ln908_1_fu_3238_p2[0:0] == 1'b1) ? select_ln896_1_fu_3244_p3 : and_ln899_3_fu_3258_p2);

assign select_ln908_fu_2802_p3 = ((icmp_ln908_fu_2770_p2[0:0] == 1'b1) ? select_ln896_fu_2776_p3 : and_ln899_1_fu_2790_p2);

assign sext_ln1116_10_fu_3446_p1 = $signed(temp_output2_0_V_load_10_reg_6286);

assign sext_ln1116_11_fu_3449_p1 = $signed(temp_output2_0_V_load_11_reg_6291);

assign sext_ln1116_12_fu_3452_p1 = $signed(temp_output2_0_V_load_12_reg_6306);

assign sext_ln1116_13_fu_3455_p1 = $signed(temp_output2_0_V_load_13_reg_6311);

assign sext_ln1116_14_fu_3458_p1 = $signed(temp_output2_0_V_load_14_reg_6326);

assign sext_ln1116_15_fu_3461_p1 = $signed(temp_output2_0_V_load_15_reg_6331);

assign sext_ln1116_16_fu_3464_p1 = $signed(temp_output2_0_V_load_16_reg_6346);

assign sext_ln1116_17_fu_3467_p1 = $signed(temp_output2_0_V_load_17_reg_6351);

assign sext_ln1116_18_fu_3470_p1 = $signed(temp_output2_0_V_load_18_reg_6366);

assign sext_ln1116_19_fu_3473_p1 = $signed(temp_output2_0_V_load_19_reg_6371);

assign sext_ln1116_1_fu_3419_p1 = $signed(temp_output2_0_V_load_1_reg_6191);

assign sext_ln1116_20_fu_3476_p1 = $signed(temp_output2_0_V_load_20_reg_6386);

assign sext_ln1116_21_fu_3479_p1 = $signed(temp_output2_0_V_load_21_reg_6391);

assign sext_ln1116_22_fu_3482_p1 = $signed(temp_output2_0_V_load_22_reg_6406);

assign sext_ln1116_23_fu_3485_p1 = $signed(temp_output2_0_V_load_23_reg_6411);

assign sext_ln1116_24_fu_3488_p1 = $signed(temp_output2_0_V_load_24_reg_6426);

assign sext_ln1116_25_fu_3491_p1 = $signed(temp_output2_0_V_load_25_reg_6431);

assign sext_ln1116_26_fu_3494_p1 = $signed(temp_output2_0_V_load_26_reg_6446);

assign sext_ln1116_27_fu_3497_p1 = $signed(temp_output2_0_V_load_27_reg_6451);

assign sext_ln1116_28_fu_3500_p1 = $signed(temp_output2_0_V_load_28_reg_6466);

assign sext_ln1116_29_fu_3503_p1 = $signed(temp_output2_0_V_load_29_reg_6471);

assign sext_ln1116_2_fu_3422_p1 = $signed(temp_output2_0_V_load_2_reg_6206);

assign sext_ln1116_30_fu_3506_p1 = $signed(temp_output2_0_V_load_30_reg_6486);

assign sext_ln1116_31_fu_3509_p1 = $signed(temp_output2_0_V_load_31_reg_6491);

assign sext_ln1116_32_fu_3512_p1 = $signed(temp_output2_0_V_load_32_reg_6506);

assign sext_ln1116_33_fu_3515_p1 = $signed(temp_output2_0_V_load_33_reg_6511);

assign sext_ln1116_34_fu_3518_p1 = $signed(temp_output2_0_V_load_34_reg_6526);

assign sext_ln1116_35_fu_3521_p1 = $signed(temp_output2_0_V_load_35_reg_6531);

assign sext_ln1116_36_fu_3524_p1 = $signed(temp_output2_0_V_load_36_reg_6546);

assign sext_ln1116_37_fu_3527_p1 = $signed(temp_output2_0_V_load_37_reg_6551);

assign sext_ln1116_38_fu_3530_p1 = $signed(temp_output2_0_V_load_38_reg_6566);

assign sext_ln1116_39_fu_3533_p1 = $signed(temp_output2_0_V_load_39_reg_6571);

assign sext_ln1116_3_fu_3425_p1 = $signed(temp_output2_0_V_load_3_reg_6211);

assign sext_ln1116_40_fu_3536_p1 = $signed(temp_output2_0_V_load_40_reg_6586);

assign sext_ln1116_41_fu_3539_p1 = $signed(temp_output2_0_V_load_41_reg_6591);

assign sext_ln1116_42_fu_3542_p1 = $signed(temp_output2_0_V_load_42_reg_6606);

assign sext_ln1116_43_fu_3545_p1 = $signed(temp_output2_0_V_load_43_reg_6611);

assign sext_ln1116_44_fu_3548_p1 = $signed(temp_output2_0_V_load_44_reg_6626);

assign sext_ln1116_45_fu_3551_p1 = $signed(temp_output2_0_V_load_45_reg_6631);

assign sext_ln1116_46_fu_3554_p1 = $signed(temp_output2_0_V_load_46_reg_6646);

assign sext_ln1116_47_fu_3557_p1 = $signed(temp_output2_0_V_load_47_reg_6651);

assign sext_ln1116_48_fu_3560_p1 = $signed(temp_output2_0_V_load_48_reg_6666);

assign sext_ln1116_49_fu_3563_p1 = $signed(temp_output2_0_V_load_49_reg_6671);

assign sext_ln1116_4_fu_3428_p1 = $signed(temp_output2_0_V_load_4_reg_6226);

assign sext_ln1116_50_fu_3566_p1 = $signed(temp_output2_0_V_load_50_reg_6686);

assign sext_ln1116_51_fu_3569_p1 = $signed(temp_output2_0_V_load_51_reg_6691);

assign sext_ln1116_52_fu_3572_p1 = $signed(temp_output2_0_V_load_52_reg_6706);

assign sext_ln1116_53_fu_3575_p1 = $signed(temp_output2_0_V_load_53_reg_6711);

assign sext_ln1116_54_fu_3578_p1 = $signed(temp_output2_0_V_load_54_reg_6726);

assign sext_ln1116_55_fu_3581_p1 = $signed(temp_output2_0_V_load_55_reg_6731);

assign sext_ln1116_56_fu_3584_p1 = $signed(temp_output2_0_V_load_56_reg_6746);

assign sext_ln1116_57_fu_3587_p1 = $signed(temp_output2_0_V_load_57_reg_6751);

assign sext_ln1116_58_fu_3590_p1 = $signed(temp_output2_0_V_load_58_reg_6766);

assign sext_ln1116_59_fu_3593_p1 = $signed(temp_output2_0_V_load_59_reg_6771);

assign sext_ln1116_5_fu_3431_p1 = $signed(temp_output2_0_V_load_5_reg_6231);

assign sext_ln1116_60_fu_3596_p1 = $signed(temp_output2_0_V_load_60_reg_6786);

assign sext_ln1116_61_fu_3599_p1 = $signed(temp_output2_0_V_load_61_reg_6791);

assign sext_ln1116_62_fu_3602_p1 = $signed(temp_output2_0_V_q0);

assign sext_ln1116_6_fu_3434_p1 = $signed(temp_output2_0_V_load_6_reg_6246);

assign sext_ln1116_7_fu_3437_p1 = $signed(temp_output2_0_V_load_7_reg_6251);

assign sext_ln1116_8_fu_3440_p1 = $signed(temp_output2_0_V_load_8_reg_6266);

assign sext_ln1116_9_fu_3443_p1 = $signed(temp_output2_0_V_load_9_reg_6271);

assign sext_ln1116_fu_3416_p1 = $signed(temp_output2_0_V_load_reg_6186);

assign sext_ln581_fu_2271_p1 = sh_amt_fu_2263_p3;

assign sext_ln703_10_fu_4772_p1 = $signed(mul_ln1118_11_reg_7508);

assign sext_ln703_11_fu_4864_p1 = $signed(mul_ln1118_12_fu_4841_p2);

assign sext_ln703_12_fu_4918_p1 = $signed(mul_ln1118_13_reg_7543);

assign sext_ln703_13_fu_5033_p1 = $signed(mul_ln1118_14_fu_5010_p2);

assign sext_ln703_14_fu_5087_p1 = $signed(mul_ln1118_15_reg_7588);

assign sext_ln703_15_fu_5114_p1 = $signed(mul_ln1118_16_reg_7598);

assign sext_ln703_16_fu_5141_p1 = $signed(mul_ln1118_17_reg_7603);

assign sext_ln703_17_fu_5421_p1 = $signed(mul_ln1118_18_reg_7678);

assign sext_ln703_18_fu_5503_p1 = $signed(mul_ln1118_19_fu_5480_p2);

assign sext_ln703_19_fu_5700_p1 = $signed(mul_ln1118_20_fu_5688_p2);

assign sext_ln703_1_fu_2593_p1 = $signed(r_V_3_fu_2569_p2);

assign sext_ln703_2_fu_3829_p1 = $signed(mul_ln1118_3_fu_3806_p2);

assign sext_ln703_3_fu_3939_p1 = $signed(mul_ln1118_4_reg_7283);

assign sext_ln703_4_fu_3998_p1 = $signed(mul_ln1118_5_fu_3975_p2);

assign sext_ln703_5_fu_4035_p1 = $signed(mul_ln1118_6_fu_4012_p2);

assign sext_ln703_6_fu_4273_p1 = $signed(mul_ln1118_7_reg_7373);

assign sext_ln703_7_fu_4332_p1 = $signed(mul_ln1118_8_fu_4309_p2);

assign sext_ln703_8_fu_4530_p1 = $signed(mul_ln1118_9_fu_4507_p2);

assign sext_ln703_9_fu_4662_p1 = $signed(mul_ln1118_10_fu_4639_p2);

assign sext_ln703_fu_2553_p1 = $signed(r_V_1_fu_2539_p2);

assign sh_amt_fu_2263_p3 = ((icmp_ln581_fu_2248_p2[0:0] == 1'b1) ? add_ln581_fu_2253_p2 : sub_ln581_fu_2258_p2);

assign shl_ln1_fu_5785_p3 = {{i_3_reg_2113}, {8'd0}};

assign shl_ln604_fu_2329_p2 = trunc_ln583_fu_2280_p1 << sext_ln581_fu_2271_p1;

assign shl_ln728_10_fu_4027_p3 = {{tmp_20_fu_4017_p4}, {8'd0}};

assign shl_ln728_11_fu_4082_p3 = {{tmp_21_reg_7323}, {8'd0}};

assign shl_ln728_12_fu_4104_p3 = {{tmp_22_fu_4094_p4}, {8'd0}};

assign shl_ln728_13_fu_4127_p3 = {{tmp_23_fu_4117_p4}, {8'd0}};

assign shl_ln728_14_fu_4159_p3 = {{tmp_24_fu_4149_p4}, {8'd0}};

assign shl_ln728_15_fu_4192_p3 = {{tmp_25_fu_4182_p4}, {8'd0}};

assign shl_ln728_16_fu_4243_p3 = {{tmp_26_reg_7368}, {8'd0}};

assign shl_ln728_17_fu_4265_p3 = {{tmp_27_fu_4255_p4}, {8'd0}};

assign shl_ln728_18_fu_4292_p3 = {{tmp_28_fu_4282_p4}, {8'd0}};

assign shl_ln728_19_fu_4324_p3 = {{tmp_29_fu_4314_p4}, {8'd0}};

assign shl_ln728_1_fu_3693_p3 = {{tmp_4_fu_3683_p4}, {8'd0}};

assign shl_ln728_20_fu_4361_p3 = {{tmp_30_fu_4351_p4}, {8'd0}};

assign shl_ln728_21_fu_4412_p3 = {{tmp_31_reg_7413}, {8'd0}};

assign shl_ln728_22_fu_4434_p3 = {{tmp_32_fu_4424_p4}, {8'd0}};

assign shl_ln728_23_fu_4457_p3 = {{tmp_33_fu_4447_p4}, {8'd0}};

assign shl_ln728_24_fu_4489_p3 = {{tmp_34_fu_4479_p4}, {8'd0}};

assign shl_ln728_25_fu_4522_p3 = {{tmp_35_fu_4512_p4}, {8'd0}};

assign shl_ln728_26_fu_4577_p3 = {{tmp_36_reg_7458}, {8'd0}};

assign shl_ln728_27_fu_4599_p3 = {{tmp_37_fu_4589_p4}, {8'd0}};

assign shl_ln728_28_fu_4622_p3 = {{tmp_38_fu_4612_p4}, {8'd0}};

assign shl_ln728_29_fu_4654_p3 = {{tmp_39_fu_4644_p4}, {8'd0}};

assign shl_ln728_2_fu_3744_p3 = {{tmp_11_reg_7233}, {8'd0}};

assign shl_ln728_30_fu_4691_p3 = {{tmp_40_fu_4681_p4}, {8'd0}};

assign shl_ln728_31_fu_4742_p3 = {{tmp_41_reg_7503}, {8'd0}};

assign shl_ln728_32_fu_4764_p3 = {{tmp_42_fu_4754_p4}, {8'd0}};

assign shl_ln728_33_fu_4791_p3 = {{tmp_43_fu_4781_p4}, {8'd0}};

assign shl_ln728_34_fu_4823_p3 = {{tmp_44_fu_4813_p4}, {8'd0}};

assign shl_ln728_35_fu_4856_p3 = {{tmp_45_fu_4846_p4}, {8'd0}};

assign shl_ln728_36_fu_4911_p3 = {{tmp_46_reg_7548}, {8'd0}};

assign shl_ln728_37_fu_4937_p3 = {{tmp_47_fu_4927_p4}, {8'd0}};

assign shl_ln728_38_fu_4960_p3 = {{tmp_48_fu_4950_p4}, {8'd0}};

assign shl_ln728_39_fu_4992_p3 = {{tmp_49_fu_4982_p4}, {8'd0}};

assign shl_ln728_3_fu_3766_p3 = {{tmp_12_fu_3756_p4}, {8'd0}};

assign shl_ln728_40_fu_5025_p3 = {{tmp_50_fu_5015_p4}, {8'd0}};

assign shl_ln728_41_fu_5080_p3 = {{tmp_51_reg_7593}, {8'd0}};

assign shl_ln728_42_fu_5106_p3 = {{tmp_52_fu_5096_p4}, {8'd0}};

assign shl_ln728_43_fu_5133_p3 = {{tmp_53_fu_5123_p4}, {8'd0}};

assign shl_ln728_44_fu_5169_p3 = {{tmp_54_fu_5159_p4}, {8'd0}};

assign shl_ln728_45_fu_5202_p3 = {{tmp_55_fu_5192_p4}, {8'd0}};

assign shl_ln728_46_fu_5253_p3 = {{tmp_56_reg_7638}, {8'd0}};

assign shl_ln728_47_fu_5275_p3 = {{tmp_57_fu_5265_p4}, {8'd0}};

assign shl_ln728_48_fu_5298_p3 = {{tmp_58_fu_5288_p4}, {8'd0}};

assign shl_ln728_49_fu_5330_p3 = {{tmp_59_fu_5320_p4}, {8'd0}};

assign shl_ln728_4_fu_3789_p3 = {{tmp_13_fu_3779_p4}, {8'd0}};

assign shl_ln728_50_fu_5363_p3 = {{tmp_60_fu_5353_p4}, {8'd0}};

assign shl_ln728_51_fu_5414_p3 = {{tmp_61_reg_7683}, {8'd0}};

assign shl_ln728_52_fu_5440_p3 = {{tmp_62_fu_5430_p4}, {8'd0}};

assign shl_ln728_53_fu_5463_p3 = {{tmp_63_fu_5453_p4}, {8'd0}};

assign shl_ln728_54_fu_5495_p3 = {{tmp_64_fu_5485_p4}, {8'd0}};

assign shl_ln728_55_fu_5532_p3 = {{tmp_65_fu_5522_p4}, {8'd0}};

assign shl_ln728_56_fu_5574_p3 = {{tmp_66_reg_7723}, {8'd0}};

assign shl_ln728_57_fu_5596_p3 = {{tmp_67_fu_5586_p4}, {8'd0}};

assign shl_ln728_58_fu_5628_p3 = {{tmp_68_fu_5618_p4}, {8'd0}};

assign shl_ln728_59_fu_5661_p3 = {{tmp_69_fu_5651_p4}, {8'd0}};

assign shl_ln728_5_fu_3821_p3 = {{tmp_14_fu_3811_p4}, {8'd0}};

assign shl_ln728_60_fu_5693_p3 = {{tmp_70_reg_7753}, {8'd0}};

assign shl_ln728_61_fu_5729_p3 = {{tmp_71_fu_5719_p4}, {8'd0}};

assign shl_ln728_6_fu_3858_p3 = {{tmp_15_fu_3848_p4}, {8'd0}};

assign shl_ln728_7_fu_3909_p3 = {{tmp_16_reg_7278}, {8'd0}};

assign shl_ln728_8_fu_3931_p3 = {{tmp_17_fu_3921_p4}, {8'd0}};

assign shl_ln728_9_fu_3958_p3 = {{tmp_18_fu_3948_p4}, {8'd0}};

assign shl_ln728_s_fu_3990_p3 = {{tmp_19_fu_3980_p4}, {8'd0}};

assign shl_ln899_1_fu_3192_p2 = 32'd1 << lsb_index_1_fu_3150_p2;

assign shl_ln899_fu_2724_p2 = 32'd1 << lsb_index_fu_2682_p2;

assign shl_ln909_1_fu_3297_p2 = zext_ln907_1_fu_3282_p1 << zext_ln909_1_fu_3294_p1;

assign shl_ln909_fu_2829_p2 = zext_ln907_fu_2814_p1 << zext_ln909_fu_2826_p1;

assign shl_ln_fu_3660_p3 = {{tmp_s_fu_3650_p4}, {8'd0}};

assign sub_ln581_fu_2258_p2 = (12'd8 - F2_reg_5906);

assign sub_ln894_1_fu_3144_p2 = (32'd32 - l_1_fu_3136_p3);

assign sub_ln894_fu_2676_p2 = (32'd32 - l_fu_2668_p3);

assign sub_ln897_1_fu_3176_p2 = (6'd22 - trunc_ln897_1_fu_3172_p1);

assign sub_ln897_fu_2708_p2 = (6'd22 - trunc_ln897_fu_2704_p1);

assign sub_ln909_1_fu_3264_p2 = (32'd54 - sub_ln894_1_fu_3144_p2);

assign sub_ln909_fu_2796_p2 = (32'd54 - sub_ln894_fu_2676_p2);

assign sub_ln915_1_fu_3349_p2 = (11'd24 - trunc_ln893_1_reg_6158);

assign sub_ln915_fu_2881_p2 = (11'd24 - trunc_ln893_reg_6041);

assign temp_output2_0_V_addr_reg_5914 = 64'd0;

assign temp_output2_0_V_load_63_cast_fu_3606_p1 = $signed(temp_output2_0_V_q1);

assign tmp_10_cast_fu_3001_p3 = {{trunc_ln1118_fu_2997_p1}, {6'd0}};

assign tmp_10_fu_2314_p3 = input_img_load_reg_5878_pp0_iter2_reg[32'd31];

assign tmp_12_fu_3756_p4 = {{add_ln1192_2_fu_3751_p2[39:8]}};

assign tmp_13_fu_3779_p4 = {{add_ln1192_3_fu_3774_p2[39:8]}};

assign tmp_14_fu_3811_p4 = {{add_ln1192_4_fu_3797_p2[39:8]}};

assign tmp_15_fu_3848_p4 = {{add_ln1192_5_fu_3833_p2[39:8]}};

assign tmp_17_fu_3921_p4 = {{add_ln1192_7_fu_3916_p2[39:8]}};

assign tmp_18_fu_3948_p4 = {{add_ln1192_8_fu_3942_p2[39:8]}};

assign tmp_19_fu_3980_p4 = {{add_ln1192_9_fu_3966_p2[39:8]}};

assign tmp_1_fu_2892_p3 = {{p_Result_10_reg_6011}, {add_ln915_fu_2886_p2}};

assign tmp_20_fu_4017_p4 = {{add_ln1192_10_fu_4002_p2[39:8]}};

assign tmp_22_fu_4094_p4 = {{add_ln1192_12_fu_4089_p2[39:8]}};

assign tmp_23_fu_4117_p4 = {{add_ln1192_13_fu_4112_p2[39:8]}};

assign tmp_24_fu_4149_p4 = {{add_ln1192_14_fu_4135_p2[39:8]}};

assign tmp_25_fu_4182_p4 = {{add_ln1192_15_fu_4167_p2[39:8]}};

assign tmp_27_fu_4255_p4 = {{add_ln1192_17_fu_4250_p2[39:8]}};

assign tmp_28_fu_4282_p4 = {{add_ln1192_18_fu_4276_p2[39:8]}};

assign tmp_29_fu_4314_p4 = {{add_ln1192_19_fu_4300_p2[39:8]}};

assign tmp_2_fu_3360_p3 = {{p_Result_14_reg_6128}, {add_ln915_1_fu_3354_p2}};

assign tmp_30_fu_4351_p4 = {{add_ln1192_20_fu_4336_p2[39:8]}};

assign tmp_32_fu_4424_p4 = {{add_ln1192_22_fu_4419_p2[39:8]}};

assign tmp_33_fu_4447_p4 = {{add_ln1192_23_fu_4442_p2[39:8]}};

assign tmp_34_fu_4479_p4 = {{add_ln1192_24_fu_4465_p2[39:8]}};

assign tmp_35_fu_4512_p4 = {{add_ln1192_25_fu_4497_p2[39:8]}};

assign tmp_37_fu_4589_p4 = {{add_ln1192_27_fu_4584_p2[39:8]}};

assign tmp_38_fu_4612_p4 = {{add_ln1192_28_fu_4607_p2[39:8]}};

assign tmp_39_fu_4644_p4 = {{add_ln1192_29_fu_4630_p2[39:8]}};

assign tmp_40_fu_4681_p4 = {{add_ln1192_30_fu_4666_p2[39:8]}};

assign tmp_42_fu_4754_p4 = {{add_ln1192_32_fu_4749_p2[39:8]}};

assign tmp_43_fu_4781_p4 = {{add_ln1192_33_fu_4775_p2[39:8]}};

assign tmp_44_fu_4813_p4 = {{add_ln1192_34_fu_4799_p2[39:8]}};

assign tmp_45_fu_4846_p4 = {{add_ln1192_35_fu_4831_p2[39:8]}};

assign tmp_47_fu_4927_p4 = {{add_ln1192_37_fu_4921_p2[39:8]}};

assign tmp_48_fu_4950_p4 = {{add_ln1192_38_fu_4945_p2[39:8]}};

assign tmp_49_fu_4982_p4 = {{add_ln1192_39_fu_4968_p2[39:8]}};

assign tmp_4_fu_3683_p4 = {{add_ln1192_fu_3668_p2[39:8]}};

assign tmp_50_fu_5015_p4 = {{add_ln1192_40_fu_5000_p2[39:8]}};

assign tmp_52_fu_5096_p4 = {{add_ln1192_42_fu_5090_p2[39:8]}};

assign tmp_53_fu_5123_p4 = {{add_ln1192_43_fu_5117_p2[39:8]}};

assign tmp_54_fu_5159_p4 = {{add_ln1192_44_fu_5144_p2[39:8]}};

assign tmp_55_fu_5192_p4 = {{add_ln1192_45_fu_5177_p2[39:8]}};

assign tmp_57_fu_5265_p4 = {{add_ln1192_47_fu_5260_p2[39:8]}};

assign tmp_58_fu_5288_p4 = {{add_ln1192_48_fu_5283_p2[39:8]}};

assign tmp_59_fu_5320_p4 = {{add_ln1192_49_fu_5306_p2[39:8]}};

assign tmp_5_fu_2284_p4 = {{sh_amt_fu_2263_p3[11:5]}};

assign tmp_60_fu_5353_p4 = {{add_ln1192_50_fu_5338_p2[39:8]}};

assign tmp_62_fu_5430_p4 = {{add_ln1192_52_fu_5424_p2[39:8]}};

assign tmp_63_fu_5453_p4 = {{add_ln1192_53_fu_5448_p2[39:8]}};

assign tmp_64_fu_5485_p4 = {{add_ln1192_54_fu_5471_p2[39:8]}};

assign tmp_65_fu_5522_p4 = {{add_ln1192_55_fu_5507_p2[39:8]}};

assign tmp_67_fu_5586_p4 = {{add_ln1192_57_fu_5581_p2[39:8]}};

assign tmp_68_fu_5618_p4 = {{add_ln1192_58_fu_5604_p2[39:8]}};

assign tmp_69_fu_5651_p4 = {{add_ln1192_59_fu_5636_p2[39:8]}};

assign tmp_6_fu_2481_p4 = {{k_reg_2011[8:1]}};

assign tmp_71_fu_5719_p4 = {{add_ln1192_61_fu_5704_p2[39:8]}};

assign tmp_75_fu_2688_p4 = {{lsb_index_fu_2682_p2[31:1]}};

assign tmp_76_fu_2748_p3 = lsb_index_fu_2682_p2[32'd31];

assign tmp_79_fu_3156_p4 = {{lsb_index_1_fu_3150_p2[31:1]}};

assign tmp_7_fu_2491_p3 = {{tmp_6_fu_2481_p4}, {j_reg_1999}};

assign tmp_80_fu_3216_p3 = lsb_index_1_fu_3150_p2[32'd31];

assign tmp_8_fu_2515_p3 = {{or_ln25_fu_2504_p2}, {7'd0}};

assign tmp_9_fu_2575_p4 = {{ret_V_fu_2557_p2[39:8]}};

assign tmp_V_2_fu_3112_p2 = (32'd0 - temp_output2_0_V_q1);

assign tmp_V_4_fu_2650_p3 = ((p_Result_10_fu_2636_p3[0:0] == 1'b1) ? tmp_V_fu_2644_p2 : temp_output_0_V_q1);

assign tmp_V_5_fu_3118_p3 = ((p_Result_14_fu_3104_p3[0:0] == 1'b1) ? tmp_V_2_fu_3112_p2 : temp_output2_0_V_q1);

assign tmp_V_fu_2644_p2 = ($signed(32'd0) - $signed(temp_output_0_V_q1));

assign tmp_s_fu_3650_p4 = {{mul_ln1118_fu_3636_p2[39:8]}};

assign trunc_ln1118_fu_2997_p1 = select_ln40_fu_2972_p3[6:0];

assign trunc_ln1506_1_fu_3384_p4 = {{m_5_fu_3313_p2[52:1]}};

assign trunc_ln555_fu_2182_p1 = ireg_fu_2178_p1[62:0];

assign trunc_ln565_fu_2208_p1 = ireg_fu_2178_p1[51:0];

assign trunc_ln583_fu_2280_p1 = man_V_2_fu_2241_p3[31:0];

assign trunc_ln586_fu_2310_p1 = ashr_ln586_fu_2304_p2[31:0];

assign trunc_ln6_fu_2916_p4 = {{m_3_fu_2845_p2[52:1]}};

assign trunc_ln731_cast59_fu_5766_p1 = ap_phi_mux_i_3_phi_fu_2117_p4;

assign trunc_ln851_fu_5823_p1 = max_idx_V_reg_2125[7:0];

assign trunc_ln893_1_fu_3278_p1 = l_1_fu_3136_p3[10:0];

assign trunc_ln893_fu_2810_p1 = l_fu_2668_p3[10:0];

assign trunc_ln897_1_fu_3172_p1 = sub_ln894_1_fu_3144_p2[5:0];

assign trunc_ln897_fu_2704_p1 = sub_ln894_fu_2676_p2[5:0];

assign weights_layer1_weights_V_address0 = zext_ln1118_1_fu_2528_p1;

assign weights_layer1_weights_V_address1 = zext_ln1118_fu_2499_p1;

assign weights_layer2_weights_V_address0 = zext_ln1118_2_fu_3015_p1;

assign xor_ln571_fu_2335_p2 = (icmp_ln571_reg_5898 ^ 1'd1);

assign xor_ln581_fu_2381_p2 = (or_ln581_fu_2375_p2 ^ 1'd1);

assign xor_ln582_fu_2351_p2 = (or_ln582_fu_2346_p2 ^ 1'd1);

assign xor_ln899_1_fu_3224_p2 = (tmp_80_fu_3216_p3 ^ 1'd1);

assign xor_ln899_fu_2756_p2 = (tmp_76_fu_2748_p3 ^ 1'd1);

assign zext_ln1118_1_fu_2528_p1 = add_ln1118_fu_2523_p2;

assign zext_ln1118_2_fu_3015_p1 = add_ln1118_1_fu_3009_p2;

assign zext_ln1118_fu_2499_p1 = tmp_7_fu_2491_p3;

assign zext_ln111_fu_5793_p1 = shl_ln1_fu_5785_p3;

assign zext_ln21_1_fu_2460_p1 = j_reg_1999;

assign zext_ln21_fu_2456_p1 = j_reg_1999;

assign zext_ln23_fu_2510_p1 = or_ln25_fu_2504_p2;

assign zext_ln40_fu_3077_p1 = select_ln40_1_reg_6078_pp3_iter1_reg;

assign zext_ln455_fu_2204_p1 = exp_tmp_fu_2194_p4;

assign zext_ln569_fu_2231_p1 = p_Result_9_fu_2224_p3;

assign zext_ln586_fu_2300_p1 = $unsigned(sext_ln581_fu_2271_p1);

assign zext_ln897_1_fu_3182_p1 = sub_ln897_1_fu_3176_p2;

assign zext_ln897_fu_2714_p1 = sub_ln897_fu_2708_p2;

assign zext_ln907_1_fu_3282_p1 = tmp_V_5_reg_6133;

assign zext_ln907_fu_2814_p1 = tmp_V_4_reg_6016;

assign zext_ln908_1_fu_3285_p1 = add_ln908_1_reg_6143;

assign zext_ln908_fu_2817_p1 = add_ln908_reg_6026;

assign zext_ln909_1_fu_3294_p1 = sub_ln909_1_reg_6148;

assign zext_ln909_fu_2826_p1 = sub_ln909_reg_6031;

assign zext_ln911_1_fu_3310_p1 = select_ln908_2_reg_6153;

assign zext_ln911_fu_2842_p1 = select_ln908_reg_6036;

assign zext_ln912_1_fu_3329_p1 = m_fu_3319_p4;

assign zext_ln912_fu_2861_p1 = m_8_fu_2851_p4;

always @ (posedge ap_clk) begin
    i_cast_reg_5868[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    i_cast_reg_5868_pp0_iter1_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    i_cast_reg_5868_pp0_iter2_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln21_reg_5928[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln21_1_reg_5933[15:8] <= 8'b00000000;
    j_2_cast_reg_7135[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    j_2_cast_reg_7135_pp5_iter1_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    j_2_cast_reg_7135_pp5_iter2_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    j_2_cast_reg_7135_pp5_iter3_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    j_2_cast_reg_7135_pp5_iter4_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    j_2_cast_reg_7135_pp5_iter5_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    j_2_cast_reg_7135_pp5_iter6_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    j_2_cast_reg_7135_pp5_iter7_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    j_2_cast_reg_7135_pp5_iter8_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    j_2_cast_reg_7135_pp5_iter9_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    j_2_cast_reg_7135_pp5_iter10_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    j_2_cast_reg_7135_pp5_iter11_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    j_2_cast_reg_7135_pp5_iter12_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    j_2_cast_reg_7135_pp5_iter13_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //nn_inference
